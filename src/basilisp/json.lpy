(ns basilisp.json
  (:import json))

;;;;;;;;;;;;;;
;; Encoders ;;
;;;;;;;;;;;;;;

(defprotocol JSONEncodeable
  (encode-to-json* [this opts]
    "Return an object which can be JSON encoded by Python's default JSONEncoder.

     `opts` is a map of options:
       - `:key-fn` is a function which will be called for each key in a map.
       - `:value-fn` is a function called for each value in a map."))

(defn ^:private encode-scalar
  [o _]
  o)

(extend python/str
  JSONEncodeable
  {:encode-to-json* encode-scalar})

(extend python/int
  JSONEncodeable
  {:encode-to-json* encode-scalar})

(extend python/float
  JSONEncodeable
  {:encode-to-json* encode-scalar})

(extend python/bool
  JSONEncodeable
  {:encode-to-json* encode-scalar})

(extend nil
  JSONEncodeable
  {:encode-to-json* encode-scalar})

(defn ^:private encode-kw-or-sym
  [o _]
  (if-let [ns-str (namespace o)]
    (str ns-str "/" (name o))
    (name o)))

(extend basilisp.lang.keyword/Keyword
  JSONEncodeable
  {:encode-to-json* encode-kw-or-sym})

(extend basilisp.lang.symbol/Symbol
  JSONEncodeable
  {:encode-to-json* encode-kw-or-sym})

(defn ^:private encode-map-key
  [k]
  (if (keyword? k)
    (name k)
    (str k)))

(defn ^:private encode-map
  [o {:keys [key-fn value-fn] :as opts}]
  (let [encode-value (or value-fn
                         (fn [_ v]
                           (encode-to-json* v opts)))]
    (->> o
         (map (fn [[k v]]
                [(key-fn k) (encode-value k v)]))
         (python/dict))))

(extend basilisp.lang.interfaces/IPersistentMap
  JSONEncodeable
  {:encode-to-json* encode-map})

(defn ^:private encode-seq
  [o opts]
  (->> o
       (map #(encode-to-json* % opts))
       (python/list)))

(extend basilisp.lang.interfaces/IPersistentList
  JSONEncodeable
  {:encode-to-json* encode-seq})

(extend basilisp.lang.interfaces/IPersistentSet
  JSONEncodeable
  {:encode-to-json* encode-seq})

(extend basilisp.lang.interfaces/IPersistentVector
  JSONEncodeable
  {:encode-to-json* encode-seq})

(defn write-str
  [o & {:keys [key-fn value-fn]}]
  (json/dumps o **
              :default (fn [o]
                         (encode-to-json* o {:key-fn   (or key-fn encode-map-key)
                                             :value-fn value-fn}))))
