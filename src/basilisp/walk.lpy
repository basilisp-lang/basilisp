(ns basilisp.walk)

(defprotocol IWalkable
  (walk* [this inner outer]
    "Walk the data structure applying `inner` to each element of the data structure,
     if any, and then applying `outer` to the result."))

(extend-protocol IWalkable
  basilisp.lang.interfaces/IPersistentList
  (walk* [this inner outer]
    (outer (apply list (map inner this))))

  basilisp.lang.interfaces/IMapEntry
  (walk* [this inner outer]
    (outer (map-entry (inner (key this)) (inner (val this)))))

  basilisp.lang.interfaces/ISeq
  (walk* [this inner outer]
    (outer (doall (map inner this))))

  basilisp.lang.interfaces/IPersistentVector
  (walk* [this inner outer]
    (outer (apply vector (map inner this))))

  basilisp.lang.interfaces/IPersistentMap
  (walk* [this inner outer]
    (outer (apply hash-map (mapcat inner this))))

  basilisp.lang.interfaces/IPersistentSet
  (walk* [this inner outer]
    (outer (apply hash-set (map inner this))))

  basilisp.lang.interfaces/IRecord
  (walk* [this inner outer]
    (outer (reduce (fn [rec field]
                     (conj rec (inner field)))
                   this
                   this)))

  python/object
  (walk* [this ^:no-warn-when-unused inner outer]
    (outer this)))

(defn walk
  "Walk an arbitrary, possibly nested data structure, applying inner to each
  element of form and then applying outer to the resulting form.

  All built in data structures are supported.

  Lazy sequences will be completely consumed (and thus may not be infinite)."
  [inner outer form]
  (walk* form inner outer))

(defn postwalk
  "Walk form using depth-first, post-order traversal, applying f to each form
  and replacing form with its result.

  All built in data structures are supported.

  Lazy sequences will be completely consumed (and thus may not be infinite)."
  [f form]
  (walk (partial postwalk f) f form))

(defn prewalk
  "Walk form using depth-first, pre-order traversal, applying f to each form
  and replacing form with its result.

  All built in data structures are supported.

  Lazy sequences will be completely consumed (and thus may not be infinite)."
  [f form]
  (walk (partial prewalk f) identity (f form)))

(defn postwalk-replace
  "Recursively walk through form as by postwalk, replacing elements appearing
  as keys in replacements with the corresponding values."
  [replacements form]
  (postwalk #(if (contains? replacements %)
               (get replacements %)
               %)
            form))

(defn prewalk-replace
  "Recursively walk through form as by prewalk, replacing elements appearing
  as keys in replacements with the corresponding values."
  [replacements form]
  (prewalk #(if (contains? replacements %)
              (get replacements %)
              %)
           form))

(defn postwalk-demo
  "Print each element as it is walked as by postwalk."
  [form]
  (postwalk #(do (println (str "Walked: " %)) %) form))

(defn prewalk-demo
  "Print each element as it is walked as by postwalk."
  [form]
  (prewalk #(do (println (str "Walked: " %)) %) form))

(defn keywordize-keys
  "Recursively walk form, transforming string keys into keywords in any maps."
  [form]
  (postwalk (fn [v]
              (if (map? v)
                (->> v
                     (mapcat (fn [[k v]] [(cond-> k (string? k) (keyword)) v]))
                     (apply hash-map))
                v))
            form))

(defn stringify-keys
  "Recursively walk form, transforming keyword keys into strings in any maps."
  [form]
  (postwalk (fn [v]
              (if (map? v)
                (->> v
                     (mapcat (fn [[k v]] [(cond-> k (keyword? k) (name)) v]))
                     (apply hash-map))
                v))
            form))

(defn macroexpand-all
  "Recursively macroexpand all eligible forms contained in form."
  [form]
  (prewalk (fn [v]
             (if (seq? v)
               (macroexpand v)
               v))
           form))
