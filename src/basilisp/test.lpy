(ns basilisp.test
  "Basilisp automated testing framework.

  The functions and macros in this namespace are useful in defining automated tests
  for your Basilisp code. Basilisp's builtin test runner is a plugin for PyTest and
  benefits from many PyTest features such as test collection and subsetting.

  Test namespaces should generally be placed in a ``tests`` directory in the root of
  your project. Tests may be organized into single namespaces or nested namespaces.
  All test namespace files should be named ``test_*.lpy`` or ``*_test.lpy`` to be
  eligible for collection by the test runner.

  Tests within each test namespace should be wrapped in an outer :lpy:fn:`deftest`
  form and may optionally be organized within each form with :lpy:fn:`testing` forms.
  :lpy:fn:`is` and :lpy:fn:`are` may be used for making test assertions. All assertions
  will be processed in order to the end and all failures and errors will be reported
  at once.

  Tests may take advantage of Basilisp fixtures via :lpy:fn:`use-fixtures` to perform
  setup and teardown functions for each test or namespace. Fixtures are not the same
  (nor are they compatible with) PyTest fixtures."
  (:require
   [basilisp.template :as template]))

(def ^:dynamic *test-name* nil)
(def ^:dynamic *test-section* nil)
(def ^:dynamic *test-failures* nil)

(defmulti ^{:arglists '([fixture-type & fixtures])}
  use-fixtures
  "Configure fixture functions to be run for each test or once per namespace.

  ``fixture-type`` may be one of:

  - ``:each`` to specify that a fixture should be run before each test
  - ``:once`` to specify that a fixture should be run once per test namespace

  Fixture functions are functions of 0 arguments which must either return a value
  or temporarily ``yield`` control back to the test runner after performing some setup.
  If the ``yield`` approach is taken, the test runner will return control to the
  fixture whenever the test or tests have finished executing.

  For example, to define a fixture with setup and teardown functions, your fixture
  may take this form::

    (fn fixture []
      (setup-test)
      (yield)
      (teardown-test))

  Fixtures will be run in the order they are provided.

  Subsequent calls to ``use-fixtures`` in the same test namespace will overwrite
  fixtures applied during previous calls for the same ``fixture-type``.

  Note that due to the way fixtures are applied, the set of fixtures that are active
  for each ``fixture-type`` after all tests are collected will be applied to all tests.
  It is not possible to apply specific fixtures to individual tests by adding fixtures
  via ``use-fixture`` and then removing them after the test is defined."
  (fn [fixture-type & _] fixture-type))

(defmethod use-fixtures :each
  [_ & fixtures]
  (alter-meta! *ns* assoc ::each-fixtures fixtures))

(defmethod use-fixtures :once
  [_ & fixtures]
  (alter-meta! *ns* assoc ::once-fixtures fixtures))

(defmulti
  ^{:arglists '([expr msg line-num])}
  gen-assert
  "Implementation detail of :lpy:fn:`is` for generating macros."
  (fn [expr _ _]
    (cond
      (list? expr) (first expr)
      :else        :default)))

(defmethod gen-assert '=
  [expr msg line-num]
  `(let [actual# ~(nth expr 2)
         expected# ~(second expr)]
     (when-not (= expected# actual#)
       (vswap! *test-failures*
               conj
               {:test-name    *test-name*
                :test-section *test-section*
                :message      ~msg
                :expr         (quote ~expr)
                :actual       actual#
                :expected     expected#
                :line         ~line-num
                :type         :failure}))))

(defmethod gen-assert 'thrown?
  [expr msg line-num]
  (let [exc-type (second expr)
        body     (nthnext expr 2)]
    `(try
       (let [result# (do ~@body)]
         (vswap! *test-failures*
                 conj
                 {:test-name    *test-name*
                  :test-section *test-section*
                  :message      ~msg
                  :expr         (quote ~expr)
                  :actual       result#
                  :expected     (quote ~exc-type)
                  :line         ~line-num
                  :type         :failure}))
       (catch ~exc-type _ nil)
       (catch python/Exception e#
         (vswap! *test-failures*
                 conj
                 {:test-name    *test-name*
                  :test-section *test-section*
                  :message      (str "Expected " ~exc-type "; got " (python/type e#) " instead")
                  :expr         (quote ~expr)
                  :actual       e#
                  :expected     ~exc-type
                  :line         ~line-num
                  :type         :failure})))))

(defmethod gen-assert :default
  [expr msg line-num]
  `(let [computed# ~expr]
     (when-not computed#
       (vswap! *test-failures*
               conj
               {:test-name    *test-name*
                :test-section *test-section*
                :message      ~msg
                :expr         (quote ~expr)
                :actual       computed#
                :expected     computed#
                :line         ~line-num
                :type         :failure}))))

(defmacro is
  "Assert that a test condition, ``expr``, is true. :lpy:fn:`is` assertion failures are
  recorded and reported as test failures, causing the entire containing ``deftest`` to
  be marked as failed.

  ``expr`` can take multiple forms:

  - ``(is (= expected actual))`` generates a basic assertion that ``expected`` and
    ``actual`` are equal by ``=``; error messaging will reflect that the first element
    is the expected value and the second element is the actual value
  - ``(is (thrown? ExceptionType expr))`` generates a basic assertion that ``expr``
    does generate an exception of the type ``ExceptionType``
  - ``(is expr)`` is the most basic assertion type that just asserts that ``expr`` is
    truthy

  ``is`` assertions must appear inside of a :lpy:fn:`deftest` form."
  ([expr]
   `(is ~expr (str "Test failure: " (pr-str (quote ~expr)))))
  ([expr msg]
   (let [line-num (or (:basilisp.lang.reader/line (meta &form))
                      (:basilisp.lang.reader/line (meta (first &form))))
         exc-name (gensym "e")]
     `(try
        ~(gen-assert expr msg line-num)
        (catch python/Exception ~exc-name
          (vswap! *test-failures*
                  conj
                  {:test-name    *test-name*
                   :test-section *test-section*
                   :message      (str "Unexpected exception thrown during test run: " (python/repr ~exc-name))
                   :expr         (quote ~expr)
                   :actual       ~exc-name
                   :expected     (quote ~expr)
                   :line         ~(if line-num
                                    line-num
                                    `(.-tb_lineno (.-__traceback__ ~exc-name)))
                   :type         :error}))))))

(defmacro are
  "Generate assertions using the template expression ``expr``. Template expressions
  should be defined in terms of the symbols in the argument vector ``argv``.

  Arguments will be partitioned into groups of as many arguments are in ``argv``
  and applied to the template expression.

  As an example::

    (are [res x y] (= res (+ x y))
      3  1 2
      4  2 2
      0 -1 1)

  This would macroexpand to create a group of assertions like this::

    (do
      (is (= 3 (+ 1 2)))
      (is (= 4 (+ 2 2)))
      (is (= 0 (+ -1 1))))

  This may be convenient for generating large numbers of identically formed assertions
  with different arguments.

  Note that assertions generated with ``are`` typically lose line numbers in test
  failure reports, due to the nature of the macro generation.

  ``are`` assertions must appear inside of a :lpy:fn:`deftest` form."
  [argv expr & args]
  `(template/do-template ~argv (is ~expr) ~@args))

(defmacro testing
  "Wrapper for test cases to provide additional messaging and context around the test
  or group of tests contained inside. The value of ``msg`` will be shown in the report
  with any test failures that occur inside this block.

  ``testing`` macros may be nested. Each nested block message will be appended to the
  message from the previous block.

  ``testing`` forms must appear inside of a :lpy:fn:`deftest` form."
  [msg & body]
  `(binding [*test-section* (if *test-section*
                              (str *test-section* " :: " ~msg)
                              ~msg)]
     ~@body))

(defmacro deftest
  "Define a new test.

  Assertions can be made with the :lpy:fn:`is` and :lpy:fn:`are` macros. Group tests
  with the :lpy:fn:`testing` macro.

  Tests defined by `deftest` will be run by default by the PyTest test runner using
  Basilisp's builtin PyTest hook."
  [name-sym & body]
  (let [test-name-sym (vary-meta name-sym assoc ::test true)
        test-name-str (name test-name-sym)
        test-ns-name  `(quote ~(symbol (name *ns*)))]
    `(defn ~test-name-sym
       []
       (binding [*ns*            (the-ns ~test-ns-name)
                 *test-name*     ~test-name-str
                 *test-section*  nil
                 *test-failures* (volatile! [])]
         ~@body
         {:failures (deref *test-failures*)}))))
