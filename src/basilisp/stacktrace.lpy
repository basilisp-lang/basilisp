(ns basilisp.stacktrace
  "Utility functions for printing stack traces."
  (:require [basilisp.string :as str])
  (:import [traceback :as tb]))

(defn root-cause
  "Return the root cause exception of the possible chain of exceptions ``exc``."
  [^python/BaseException exc]
  (loop [e exc]
    (if-let [cause (.-__cause__ e)]
      (recur cause)
      e)))

(defn context
  "Return any context exception to the exception ``exc``.

  Context exceptions may be the same as cause exceptions. Typically, when throwing an
  exception with an explicit cause the context exception is suppressed (via
  ``BaseException.__suppress_context__``). If called with one argument, this function
  will use the value of ``__suppress_context__`` for ``suppress-context?``. If called
  with two arguments, the caller can specify if context should be returned or suppressed."
  ([^python/BaseException exc]
   (context exc (.-__suppress_context__ exc)))
  ([^python/BaseException exc suppress-context?]
   (when-not suppress-context?
     (.-__context__ exc))))

(defn print-stack-trace
  "Prints up to ``n`` stack frames from the traceback of the exception ``exc``, not
  including chained exceptions (causes and context exceptions).

  To print exception tracebacks including causes, use :lpy:fn:`print-cause-trace`.

  If ``n`` is not given, return all frames."
  ([exc]
   (print-stack-trace exc nil))
  ([exc n]
   (->> (tb/format_exception (python/type exc)
                             exc
                             (.-__traceback__ exc)
                             **
                             :limit n
                             :chain false)
        (str/join " ")
        print)))

(defn print-cause-trace
  "Prints up to ``n`` stack frames from the traceback of the exception ``exc``,
  including chained exceptions (causes and context exceptions).

  To print only the trace for the given exception, use :lpy:fn:`print-stack-trace`.

  If ``n`` is not given, return all frames."
  ([exc]
   (print-cause-trace exc nil))
  ([exc n]
   (->> (tb/format_exception (python/type exc)
                             exc
                             (.-__traceback__ exc)
                             **
                             :limit n
                             :chain true)
        (str/join " ")
        print)))

(defn print-throwable
  "Print the type and message of exception ``exc``.

  Prints the :lpy:fn:`ex-data` map if present."
  [exc]
  (let [exc-type (type exc)
        data-str (if-let [d (ex-data exc)]
                   (str " " d)
                   "")]
    (println
     (str (.-__module__ exc-type) "." (.-__qualname__ exc-type) ": " (ex-message exc) data-str))))

(defn e
  "REPL utility for printing the root cause (via :lpy:fn:`root-cause`) of :lpy:var:`*e`
  if an exception is bound."
  []
  (when *e
    (print-stack-trace (root-cause *e))))
