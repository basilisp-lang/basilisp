import sys
from ast import (  # noqa
    AST,
    Add,
    And,
    AnnAssign,
    Assert,
    Assign,
    AsyncFor,
    AsyncFunctionDef,
    AsyncWith,
    Attribute,
    AugAssign,
    AugLoad,
    AugStore,
    Await,
    BinOp,
    BitAnd,
    BitOr,
    BitXor,
    BoolOp,
    Break,
    Bytes,
    Call,
    ClassDef,
    Compare,
    Constant,
    Continue,
    Del,
    Delete,
    Dict,
    DictComp,
    Div,
    Ellipsis,
    Eq,
    ExceptHandler,
    Expr,
    Expression,
    ExtSlice,
    FloorDiv,
    For,
    FormattedValue,
    FunctionDef,
    GeneratorExp,
    Global,
    Gt,
    GtE,
    If,
    IfExp,
    Import,
    ImportFrom,
    In,
    Index,
    Invert,
    Is,
    IsNot,
    JoinedStr,
    Lambda,
    List,
    ListComp,
    Load,
    LShift,
    Lt,
    LtE,
    MatMult,
    Mod,
    Module,
    Mult,
    Name,
    NameConstant,
    NodeTransformer,
    NodeVisitor,
    Nonlocal,
    Not,
    NotEq,
    NotIn,
    Num,
    Or,
    Param,
    Pass,
    Pow,
    Raise,
    Return,
    RShift,
    Set,
    SetComp,
    Slice,
    Starred,
    Store,
    Str,
    Sub,
    Subscript,
    Suite,
    Try,
    Tuple,
    UAdd,
    UnaryOp,
    USub,
    While,
    With,
    Yield,
    YieldFrom,
    alias,
    arg,
    arguments,
    boolop,
    cmpop,
    comprehension,
    copy_location,
    dump,
    excepthandler,
    expr,
    expr_context,
    fix_missing_locations,
    get_docstring,
    increment_lineno,
    iter_child_nodes,
    iter_fields,
    keyword,
    literal_eval,
    mod,
    operator,
    parse,
    slice,
    stmt,
    unaryop,
    walk,
    withitem,
)
from functools import partial

__all__ = [
    "AST",
    "Add",
    "And",
    "AnnAssign",
    "Assert",
    "Assign",
    "AsyncFor",
    "AsyncFunctionDef",
    "AsyncWith",
    "Attribute",
    "AugAssign",
    "AugLoad",
    "AugStore",
    "Await",
    "BinOp",
    "BitAnd",
    "BitOr",
    "BitXor",
    "BoolOp",
    "Break",
    "Bytes",
    "Call",
    "ClassDef",
    "Compare",
    "Constant",
    "Continue",
    "Del",
    "Delete",
    "Dict",
    "DictComp",
    "Div",
    "Ellipsis",
    "Eq",
    "ExceptHandler",
    "Expr",
    "Expression",
    "ExtSlice",
    "FloorDiv",
    "For",
    "FormattedValue",
    "FunctionDef",
    "GeneratorExp",
    "Global",
    "Gt",
    "GtE",
    "If",
    "IfExp",
    "Import",
    "ImportFrom",
    "In",
    "Index",
    "Invert",
    "Is",
    "IsNot",
    "JoinedStr",
    "LShift",
    "Lambda",
    "List",
    "ListComp",
    "Load",
    "Lt",
    "LtE",
    "MatMult",
    "Mod",
    "Module",
    "Mult",
    "Name",
    "NameConstant",
    "NodeTransformer",
    "NodeVisitor",
    "Nonlocal",
    "Not",
    "NotEq",
    "NotIn",
    "Num",
    "Or",
    "Param",
    "Pass",
    "Pow",
    "RShift",
    "Raise",
    "Return",
    "Set",
    "SetComp",
    "Slice",
    "Starred",
    "Store",
    "Str",
    "Sub",
    "Subscript",
    "Suite",
    "Try",
    "Tuple",
    "UAdd",
    "USub",
    "UnaryOp",
    "While",
    "With",
    "Yield",
    "YieldFrom",
    "alias",
    "arg",
    "arguments",
    "boolop",
    "cmpop",
    "copy_location",
    "comprehension",
    "dump",
    "excepthandler",
    "expr",
    "expr_context",
    "fix_missing_locations",
    "get_docstring",
    "increment_lineno",
    "iter_child_nodes",
    "iter_fields",
    "keyword",
    "literal_eval",
    "mod",
    "operator",
    "parse",
    "slice",
    "stmt",
    "unaryop",
    "walk",
    "withitem",
]

if sys.version_info >= (3, 8):  # pragma: no cover
    Module = partial(Module, type_ignores=[])
    arguments = partial(arguments, posonlyargs=[])
