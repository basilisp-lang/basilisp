(ns basilisp.core.template
  (:require
   [basilisp.walk :refer [postwalk-replace]]))

(defn apply-template
  "Given a template expression `expr` and bindings (as `argv`), replace all instances
  of elements from `argv` in `expr` with the corresponding elements from `values`.

  For example:

    (apply-template '[x y] '(= x y) '[1 2])

  produces

    (= 1 2)"
  [argv expr values]
  (as-> values $
    (interleave argv $)
    (apply hash-map $)
    (postwalk-replace $ expr)))

(defmacro do-template
  "Given a template expression `expr` and bindings, produce a `do` expression with
  the repeated templated expressions replacing names in `argv` with elements from
  `args`.

  For example:

    (macroexpand '(do-template [x y] (= x y)
                    1 (dec 2)
                    2 (inc 1)))

  produces

    (do
      (= 1 (dec 2))
      (= 2 (inc 1)))"
  [argv expr & args]
  (let [n          (count argv)
        arg-groups (partition n args)]
    `(do
       ~@(map #(apply-template argv expr %) arg-groups))))
