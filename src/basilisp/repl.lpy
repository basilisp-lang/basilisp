(ns basilisp.repl
  (:import inspect))

(defn mark-repl-result
  "Mark the REPL result and move each result to the next slot
  down."
  [result]
  (set! *3 basilisp.repl/*2)
  (set! *2 basilisp.repl/*1)
  (set! *1 result))

(defn mark-exception
  "Set the variable *e to the last exception at the REPL."
  [e]
  (set! *e e))

(defn pydoc
  "Print the Python docstring for a function."
  [o]
  (println (inspect/getdoc o)))

(defn print-doc
  "Print the docstring from an interned var."
  [v]
  (let [var-meta (meta v)]
    (println "------------------------")
    (println (cond->> (name v)
               (namespace v) (str (namespace v) "/")))
    (when var-meta
      (when-let [arglists (:arglists var-meta)]
        (println arglists))
      (when-let [docstring (:doc var-meta)]
        (println " " docstring)))))

(defmacro doc
  "Print the docstring from an interned Var if found."
  [s]
  `(print-doc (resolve (quote ~s))))

(defn print-source
  "Print the source forms for a function."
  [_]
  (throw (python/NotImplementedError)))

(defmacro source
  "Print the source code for a form if found."
  [s]
  `(print-source (resolve (quote ~s))))
