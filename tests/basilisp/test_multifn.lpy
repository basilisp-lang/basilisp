(ns tests.basilisp.test-multifn
  (:require
   [basilisp.test :refer [deftest is testing]]))

(defmulti test-fn
  (fn [v]
    (cond
      (= v "i")  :a
      (= v "ii") :b
      :else      :default)))

(defmethod test-fn :a
  [_]
  "1")

(defmethod test-fn :b
  [_]
  "2")

(defmethod test-fn :default
  [_]
  "BLAH")

(deftest multimethod-test
  (testing "multi method usage"
    (is (= "1" (test-fn "i")))
    (is (= "2" (test-fn "ii")))
    (is (= "BLAH" (test-fn "iii")))
    (is (= "BLAH" (test-fn "other"))))

  (testing "multi-method generic assertions"
    (is (map? (methods test-fn)))
    (is (seq (methods test-fn))))

  (testing "multi method usage after removal"
    (remove-method test-fn :b)

    (is (= "1" (test-fn "i")))
    (is (= "BLAH" (test-fn "ii")))
    (is (= "BLAH" (test-fn "iii")))
    (is (= "BLAH" (test-fn "other"))))

  (testing "removing all methods"
    (remove-all-methods test-fn)

    (is (not (seq (methods test-fn))))))

(def ^:redef os-hierarchy
  (-> (make-hierarchy)
      (derive :os/osx :os/unix)))

(defmulti os-lineage
  :os
  :hierarchy #'os-hierarchy)

(defmethod os-lineage :os/unix
  [_]
  "unix")

(defmethod os-lineage :os/bsd
  [_]
  "bsd")

(defmethod os-lineage :default
  [_]
  "operating system")

(deftest multimethod-with-hierarchies-test
  (testing "cannot create multimethod with non-reference type hierarchy"
    (is (thrown? basilisp.lang.runtime/RuntimeException
                 (defmulti real-fn :os :hierarchy (make-hierarchy)))))

  (let [m {:os :os/osx}]
    (is (= "unix" (os-lineage m)))
    (is (= "unix" (os-lineage m)))  ;; check again (should be a cache hit)
    (is (= {} (prefers os-lineage)))

    (alter-var-root #'os-hierarchy derive :os/osx :os/bsd)

    (testing "ambiguous method preference"
      (is (= {} (prefers os-lineage)))
      (is (thrown? basilisp.lang.runtime/RuntimeException (os-lineage m))))

    (prefer-method os-lineage :os/unix :os/bsd)

    (testing "method preferences"
      (is (= "unix" (os-lineage m)))
      (is (= "unix" (os-lineage m)))  ;; check again (should be a cache hit)
      (is (= {:os/unix #{:os/bsd}} (prefers os-lineage)))
      (is (= "operating system" (os-lineage {:os :os/windows})))
      (is (= "operating system" (os-lineage {:os :os/windows}))))

    (testing "cannot establish conflicting preference"
      (is (thrown? basilisp.lang.runtime/RuntimeException)
          (prefer-method os-lineage :os/bsd :os/unix)))))

(defmulti args-test1 "test1" :x)
(defmulti args-test2 {:test 2} :x)
(defmulti args-test3 "test3" {:test 3} :x)
(defmulti args-test4 "test4" {:doc "other"} :x)

(deftest multi-args-optional-test
  (let [mt1 (meta #'args-test1)
        mt2 (meta #'args-test2)
        mt3 (meta #'args-test3)
        mt4 (meta #'args-test4)]
    (is (= "test1" (:doc mt1)))
    (is (= 2 (:test mt2)))
    (is (= {:doc "test3" :test 3} (select-keys mt3 [:doc :test])))
    (is (= "test4" (:doc mt4)))))
