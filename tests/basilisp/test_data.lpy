(ns tests.basilisp.test-data
  (:import datetime)
  (:require
   [basilisp.data :refer [diff]]
   [basilisp.test :refer [deftest are testing]]))

(deftest diff-test
  (testing "scalar types"
    (testing "no diff if equal"
      (are [x] (= [nil nil x] (diff x x))
        ""
        "string"
        -1
        0
        1
        -1.0
        0.0
        1.0
        true
        false
        nil

        :kw
        :ns/kw
        'sym
        'ns/sym

        #inst "2020-06-04T22:32:29.871744"
        (datetime/date 2020 6 4)
        (datetime/time 22 35 38)
        3.1415926535M
        22/7
        #uuid "632ac3d8-fcfd-4d36-a05b-a54277a345bc"))

    (testing "completely different if not equal"
      (are [x y] (= [x y nil] (diff x y))
        ""       "not empty"
        "string" "not a string"
        -1       -9327
        0        3
        1        1373
        -1.0     -71.183
        0.0      1.373
        1.0      43727272.3
        true     false
        false    true
        nil      :not-nil

        :kw     :other-kw
        :ns/kw  :other-ns/kw
        'sym    'other-sym
        'ns/sym 'other-ns/sym

        #inst "2020-06-04T22:32:29.871744"           #inst "2019-01-03T11:15:30.871744"
        (datetime/date 2020 6 4)                     (datetime/time 22 35 38)
        (datetime/time 22 35 38)                     (datetime/date 2020 6 4)
        3.1415926535M                                2.7182818284M
        22/7                                         1/2
        #uuid "632ac3d8-fcfd-4d36-a05b-a54277a345bc" #uuid "33fef9e5-071c-47e6-886c-f8790bf1d07d")))

  (testing "set types"
    (testing "set types never equal to non-set type"
      (are [x] (= [#{} x nil] (diff #{} x))
        ""
        "string"
        -1
        0
        1
        -1.0
        0.0
        1.0
        true
        false
        nil

        :kw
        :ns/kw
        'sym
        'ns/sym

        #inst "2020-06-04T22:32:29.871744"
        (datetime/date 2020 6 4)
        (datetime/time 22 35 38)
        3.1415926535M
        22/7
        #uuid "632ac3d8-fcfd-4d36-a05b-a54277a345bc"

        {}
        []
        '()))

    (testing "Basilisp set"
      (are [x y z] (= z (diff x y))
        #{}      #{}      [nil nil #{}]
        #{:a}    #{:a}    [nil nil #{:a}]
        #{:a}    #{:b}    [#{:a} #{:b} nil]
        #{:a :b} #{:b :c} [#{:a} #{:c} #{:b}]

        ;; no subdiffs
        #{:a [:b :c]}     #{:a [:c :d]}     [#{[:b :c]} #{[:c :d]} #{:a}]
        #{:a '(:b :c)}    #{:a '(:c :d)}    [#{'(:b :c)} #{'(:c :d)} #{:a}]
        #{:a #{:b :c}}    #{:a #{:c :d}}    [#{#{:b :c}} #{#{:c :d}} #{:a}]
        #{:a {:b 2 :c 3}} #{:a {:c 3 :d 4}} [#{{:b 2 :c 3}} #{{:c 3 :d 4}} #{:a}]))

    (testing "mutable Python set"
      (are [x y z] (= z (diff (python/set x) (python/set y)))
        []      []      [nil nil #{}]
        [:a]    [:a]    [nil nil #{:a}]
        [:a]    [:b]    [#{:a} #{:b} nil]
        [:a :b] [:b :c] [#{:a} #{:c} #{:b}]

        ;; no subdiffs
        [:a [:b :c]]     [:a [:c :d]]     [#{[:b :c]} #{[:c :d]} #{:a}]
        [:a '(:b :c)]    [:a '(:c :d)]    [#{'(:b :c)} #{'(:c :d)} #{:a}]
        [:a #{:b :c}]    [:a #{:c :d}]    [#{#{:b :c}} #{#{:c :d}} #{:a}]
        [:a {:b 2 :c 3}] [:a {:c 3 :d 4}] [#{{:b 2 :c 3}} #{{:c 3 :d 4}} #{:a}]))

    (testing "Python frozenset"
      (are [x y z] (= z (diff (python/frozenset x) (python/frozenset y)))
        []      []      [nil nil #{}]
        [:a]    [:a]    [nil nil #{:a}]
        [:a]    [:b]    [#{:a} #{:b} nil]
        [:a :b] [:b :c] [#{:a} #{:c} #{:b}]

        ;; no subdiffs
        [:a [:b :c]]     [:a [:c :d]]     [#{[:b :c]} #{[:c :d]} #{:a}]
        [:a '(:b :c)]    [:a '(:c :d)]    [#{'(:b :c)} #{'(:c :d)} #{:a}]
        [:a #{:b :c}]    [:a #{:c :d}]    [#{#{:b :c}} #{#{:c :d}} #{:a}]
        [:a {:b 2 :c 3}] [:a {:c 3 :d 4}] [#{{:b 2 :c 3}} #{{:c 3 :d 4}} #{:a}])))

  (testing "sequential types"
    (testing "vector types never equal to non-sequential type"
      (are [x] (= [[] x nil] (diff [] x))
        ""
        "string"
        -1
        0
        1
        -1.0
        0.0
        1.0
        true
        false
        nil

        :kw
        :ns/kw
        'sym
        'ns/sym

        #inst "2020-06-04T22:32:29.871744"
        (datetime/date 2020 6 4)
        (datetime/time 22 35 38)
        3.1415926535M
        22/7
        #uuid "632ac3d8-fcfd-4d36-a05b-a54277a345bc"

        {}
        {:a 1}
        #{}
        #{:a :b :c}))

    (testing "list types never equal to non-sequential type"
      (are [x] (= ['() x nil] (diff '() x))
        ""
        "string"
        -1
        0
        1
        -1.0
        0.0
        1.0
        true
        false
        nil

        :kw
        :ns/kw
        'sym
        'ns/sym

        #inst "2020-06-04T22:32:29.871744"
        (datetime/date 2020 6 4)
        (datetime/time 22 35 38)
        3.1415926535M
        22/7
        #uuid "632ac3d8-fcfd-4d36-a05b-a54277a345bc"

        {}
        {:a 1}
        #{}
        #{:a :b :c}))

    (testing "sequential types equal"
      (are [x y z] (= z (diff x y))
        []                []                  [nil nil []]
        [1 2 3]           [2 3 4]             [[1 2 3] [2 3 4] nil]
        [1 2 3]           [1 2 4]             [[nil nil 3] [nil nil 4] [1 2]]
        [1 2 3]           [1 2 3]             [nil nil [1 2 3]]
        [1 2 3]           [1 2 3 4]           [nil [nil nil nil 4] [1 2 3]]
        [1 2 3]           [5 9 3 2 3 7]       [[1 2] [5 9 nil 2 3 7] [nil nil 3]]
        [{:a 1 :b 2} 2 3] [{:a 1 :b 3} 0 3]   [[{:b 2} 2] [{:b 3} 0] [{:a 1} nil 3]]
        [1 #{:a :b :c} 3] [1 #{:b :c :d} 4 3] [[nil #{:a} 3] [nil #{:d} 4 3] [1 #{:b :c}]]

        '()                '()                  [nil nil []]
        '(1 2 3)           '(2 3 4)             [[1 2 3] [2 3 4] nil]
        '(1 2 3)           '(1 2 4)             [[nil nil 3] [nil nil 4] [1 2]]
        '(1 2 3)           '(1 2 3)             [nil nil [1 2 3]]
        '(1 2 3)           '(1 2 3 4)           [nil [nil nil nil 4] [1 2 3]]
        '(1 2 3)           '(5 9 3 2 3 7)       [[1 2] [5 9 nil 2 3 7] [nil nil 3]]
        '({:a 1 :b 2} 2 3) '({:a 1 :b 3} 0 3)   [[{:b 2} 2] [{:b 3} 0] [{:a 1} nil 3]]
        '(1 #{:a :b :c} 3) '(1 #{:b :c :d} 4 3) [[nil #{:a} 3] [nil #{:d} 4 3] [1 #{:b :c}]])))

  (testing "map types"
    (testing "map types never equal to non-map type"
      (are [x] (= [{} x nil] (diff {} x))
        ""
        "string"
        -1
        0
        1
        -1.0
        0.0
        1.0
        true
        false
        nil

        :kw
        :ns/kw
        'sym
        'ns/sym

        #inst "2020-06-04T22:32:29.871744"
        (datetime/date 2020 6 4)
        (datetime/time 22 35 38)
        3.1415926535M
        22/7
        #uuid "632ac3d8-fcfd-4d36-a05b-a54277a345bc"

        []
        [:a :b :c]
        '()
        '(:a :b :c)
        #{}
        #{:a :b :c}))

    (are [x y z] (= z (diff x y))
      {}                       {}                           [nil nil {}]
      {:a 1}                   {:a 1}                       [nil nil {:a 1}]
      {:a 1}                   {:a 2}                       [{:a 1} {:a 2} nil]
      {:a 1}                   {:b 2}                       [{:a 1} {:b 2} nil]
      {:a #{1 2 3}}            {:a #{2 3 4}}                [{:a #{1}} {:a #{4}} {:a #{3 2}}]
      {:a 1 :b {:c #{1 2 3}}}  {:a 2 :b {:c #{2 3 4}}}      [{:a 1 :b {:c #{1}}} {:a 2 :b {:c #{4}}} {:b {:c #{2 3}}}]
      {:a [1 2 3]}             {:a [5 9 3 2 3 7]}           [{:a [1 2]} {:a [5 9 nil 2 3 7]} {:a [nil nil 3]}]
      {:a [1 2 3]}             {:a '(5 9 3 2 3 7)}          [{:a [1 2]} {:a [5 9 nil 2 3 7]} {:a [nil nil 3]}]
      {:a 1 :b {:c '(1 2 3)}}  {:a 2 :b {:c [5 9 3 2 3 7]}} [{:a 1 :b {:c [1 2]}} {:a 2 :b {:c [5 9 nil 2 3 7]}} {:b {:c [nil nil 3]}}]
      {:a 1 :b {:c 2 :d 3}}    {:a 1 :b {:c 2 :e 5}}        [{:b {:d 3}} {:b {:e 5}} {:a 1 :b {:c 2}}]
      {:a {:e :f :g :h} :b :c} {:a {:e :z :g :h} :c :d}     [{:a {:e :f} :b :c} {:a {:e :z} :c :d} {:a {:g :h}}])))
