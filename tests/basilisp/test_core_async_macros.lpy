(ns tests.basilisp.test-core-async-macros
  (:import asyncio contextlib)
  (:require
   [basilisp.test :refer [deftest is are testing]]))

(defn async-to-sync
  [f & args]
  (let [loop (asyncio/new-event-loop)]
    (asyncio/set-event-loop loop)
    (.run-until-complete loop (apply f args))))

(deftest with-async-test
  (testing "base case"
    (let [get-val    (contextlib/asynccontextmanager
                      (fn ^:async get-val
                        []
                        (yield :async-val)))
          val-ctxmgr (fn ^:async yield-val
                       []
                       (with-async [v (get-val)]
                         v))]
      (is (= :async-val (async-to-sync val-ctxmgr))))))

(deftest for-async-test
  (testing "base case"
    (let [get-vals (fn ^:async get-vals
                     []
                     (dotimes [n 5]
                       (yield n)))
          val-loop (fn ^:async val-loop
                     []
                     (let [a   (atom [])
                           res (for-async [v (get-vals)]
                                          (swap! a conj v)
                                          v)]
                       [@a res]))]
      (is (= [[0 1 2 3 4] 4] (async-to-sync val-loop))))))
