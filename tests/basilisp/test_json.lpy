(ns tests.basilisp.test-json
  (:require
   [basilisp.json :as json]
   [basilisp.test :refer [deftest is are testing]]))

(deftest read-str-test
  (testing "primitive-values"
    (are [x y] (= y (json/read-str x))
      "null"       nil
      "true"       true
      "false"      false
      "0"          0
      "1"          1
      "-1"         -1
      "0.0"        0.0
      "1.0"        1.0
      "-1.0"       -1.0
      "\"\""       ""
      "\"string\"" "string"
      "[]"         []
      "{}"         {}))

  (testing "arrays"
    (are [x y] (= y (json/read-str x))
      "[null, true, false, 0, 1, -1, 0.0, 1.0, -1.0, \"\", \"string\", [], {}]"
      [nil true false 0 1 -1 0.0 1.0 -1.0 "" "string" [] {}]

      "[[null, true, false], [0, 1, -1], [0.0, 1.0, -1.0], [\"\", [\"string\"]], [[]], [{}]]"
      [[nil true false] [0 1 -1] [0.0 1.0 -1.0] ["" ["string"]] [[]] [{}]]

      "[
         {\"id\": 35, \"name\": \"Chris\", \"is_admin\": false, \"roles\": [\"user\"]},
         {\"id\": 42, \"name\": \"Carl\", \"is_admin\": true, \"roles\": [\"admin\"]}
       ]"
      [{"id" 35 "name" "Chris" "is_admin" false "roles" ["user"]}
       {"id" 42 "name" "Carl" "is_admin" true "roles" ["admin"]}])))

(deftest write-str-test
  (testing "primitive-values"
    (are [x y] (= y (json/write-str x))
      nil             "null"
      true            "true"
      false           "false"
      0               "0"
      1               "1"
      -1              "-1"
      0.0             "0.0"
      1.0             "1.0"
      -1.0            "-1.0"
      ""              "\"\""
      "string"        "\"string\""
      :kw             "\"kw\""
      :ns/kw          "\"ns/kw\""
      :long.ns/kw     "\"long.ns/kw\""
      'sym            "\"sym\""
      'ns/sym         "\"ns/sym\""
      'long.ns/sym    "\"long.ns/sym\""
      #{}             "[]"
      '()             "[]"
      []              "[]"
      {}              "{}"
      ;; (eval '#py #{}) "[]"
      #py ()          "[]"
      ;; #py []       "[]"
      ;; #py {}       "{}"
      )))
