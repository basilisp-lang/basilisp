(ns tests.basilisp.test-stacktrace
  (:require [basilisp.stacktrace :as s]
            [basilisp.string :as str]
            [basilisp.test :refer [deftest are is testing]]))


(defn- exception-test []
  (/ 5 0))

(defn- chained-exception []
  (try
    (/ 5.0 0)
    (catch python/ZeroDivisionError e
      (throw (python/ValueError "Division by zero") e))))

(defn- context-exception []
  (try
    (/ 5.0 0)
    (catch python/ZeroDivisionError e
      (throw (python/ValueError "Division by zero")))))

(deftest root-cause-test
  (testing "no root cause"
    (try
      (exception-test)
      (catch python/ZeroDivisionError e
        (is (identical? e (s/root-cause e))))))

  (testing "with root cause"
    (try
      (chained-exception)
      (catch python/ZeroDivisionError _
        (is false))
      (catch python/ValueError e
        (is (instance? python/ZeroDivisionError (s/root-cause e)))))))

(deftest context-test
  (testing "context only exception"
    (try
      (context-exception)
      (catch python/ZeroDivisionError _
        (is false))
      (catch python/ValueError e
        (is (identical? e (s/root-cause e)))
        (is (instance? python/ZeroDivisionError (s/context e))))))

  (testing "explicit cause exception"
    (try
      (chained-exception)
      (catch python/ValueError e
        (is (instance? python/ZeroDivisionError (s/root-cause e)))
        (is (instance? python/ZeroDivisionError (s/context e false)))
        (is (identical? (s/root-cause e) (s/context e false)))
        (is (nil? (s/context e)))))))

(deftest print-cause-trace-test
  (try
    (exception-test)
    (catch python/Exception e
      ;; one stack frame
      (let [trace1 (-> (with-out-str (s/print-cause-trace e 1))
                       (str/split-lines))]
        (doseq [line trace1]
          (println line))
        (is (= "Traceback (most recent call last):" (first trace1)))
        (is (every? (set trace1) ["    (try" " ZeroDivisionError: Fraction(5, 0)"])))

      ;; full stack
      (let [trace (-> (with-out-str (s/print-cause-trace e))
                      (str/split-lines))]
        (is (= "Traceback (most recent call last):" (first trace)))
        (is (= ["    raise ZeroDivisionError('Fraction(%s, 0)' % numerator)"
                " ZeroDivisionError: Fraction(5, 0)"]
               (take-last 2 trace)))))))

(deftest print-throwable
  (try
    (exception-test)
    (catch python/ZeroDivisionError e
      (is (= "builtins.ZeroDivisionError: Fraction(5, 0)"
             (str/trim (with-out-str (s/print-throwable e)))))))

  (try
    (throw (ex-info "Super bad exception" {:severity :bad!}))
    (catch python/Exception e
      (is (= "basilisp.lang.exception.ExceptionInfo: Super bad exception {:severity :bad!}"
             (str/trim (with-out-str (s/print-throwable e))))))))
