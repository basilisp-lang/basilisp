(ns tests.basilisp.test-protocols
  (:import math)
  (:require
   [basilisp.test :refer [deftest is testing]]))

(defprotocol Shape
  (area [this]))

(defprotocol Polygon
  (interior-angle [this]
    "Return the interior angle of the shape in degrees."))

(defrecord Circle [radius]
  Shape
  (area [this] (* math/pi radius radius)))

(defrecord Rectangle [x y]
  Shape
  (area [this] (* x y))
  Polygon
  (interior-angle [this] 360))

(defrecord Square [x])

(extend-type Square
  Shape
  (area [this]
    (let [side (get this :x)]
      (* side side))))

(deftest Shape-area-method-test
  (is (= math/pi (area (->Circle 1))))
  (is (= 4 (area (->Rectangle 2 2))))
  (is (= 9 (area (->Square 3))))

  (is (thrown? python/AttributeError (area :a)))
  (is (thrown? python/AttributeError (area [4 5]))))

(deftest Polygon-interior-angle-test
  (is (= 360 (interior-angle (->Rectangle 2 2))))

  (is (thrown? python/AttributeError (interior-angle (->Circle 1))))
  (is (thrown? python/AttributeError (interior-angle (->Square 3)))))

(deftest protocol?-test
  (is (protocol? Shape))
  (is (not (protocol? Circle)))
  (is (not (protocol? Rectangle))))

(deftest extend-test
  (testing "Protocols cannot extend other Protocols"
    (is (thrown? basilisp.lang.exception/ExceptionInfo
                 (extend Polygon Shape {:area identity}))))

  (testing "Protocol must be defined as by defprotocol"
    (is (thrown? basilisp.lang.exception/ExceptionInfo
                 (extend Square python/str {:area identity}))))

  (testing "Protocols cannot extend themselves"
    (is (thrown? basilisp.lang.exception/ExceptionInfo
                 (extend Shape Shape {:area identity})))))

(deftest extenders-test
  (is (= (list Square) (extenders Shape)))
  (is (not (seq (extenders Polygon)))))

(deftest extends?-test
  (is (extends? Shape Circle))
  (is (extends? Shape Rectangle))
  (is (not (extends? Polygon Circle)))
  (is (extends? Polygon Rectangle)))

(deftest satisfies?-test
  (is (satisfies? Shape (->Circle 1)))
  (is (satisfies? Shape (->Rectangle 2 2)))
  (is (not (satisfies? Polygon (->Circle 1))))
  (is (satisfies? Polygon (->Rectangle 2 2))))
