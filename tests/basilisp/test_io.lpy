(ns tests.basilisp.test-io
  (:import
   atexit
   http.server
   io
   os
   pathlib
   tempfile
   threading)
  (:require
   [basilisp.io :as bio]
   [basilisp.test :refer [deftest is are testing]]))

(def tempdir
  "Temporary directory for generating test files.

  The HTTP server below will serve files from that directory."
  (let [o (tempfile/TemporaryDirectory)]
    (atexit/register (.-cleanup o))
    (.-name o)))

(def http-server-port
  "HTTP Server port for the test.

  Note that each different version of Python has its own port to avoid conflicts
  when multiple test suites are run in parallel on the same computer."
  #?(:lpy36 8081
     :lpy37 8082
     :lpy38 8083
     :lpy39 8084
     :default 8080))

(defonce ^:private http-server
  (doto (threading/Thread
         **
         :target (fn []
                   ;; The Python 3.6 version of SimpleHTTPRequestHandler does not
                   ;; support setting the directory it serves files from, so we
                   ;; use reader conditionals to switch the working directory
                   ;; to `tempdir` to avoid conflicting with any files in the
                   ;; current work tree.
                   (let [addr    (python/tuple ["", http-server-port])
                         handler #?(:lpy36 http.server/SimpleHTTPRequestHandler
                                    :lpy37+ (partial-kw http.server/SimpleHTTPRequestHandler :directory tempdir))
                         cwd     (os/getcwd)]
                     #?(:lpy36 (os/chdir tempdir))
                     (try
                       (with [srv (http.server/HTTPServer addr handler)]
                         (.serve-forever srv))
                       (finally
                         (os/chdir cwd)))))
         :daemon true)
    (.start)))

(deftest path-test
  (is (= (pathlib/Path "/Users/chris")
         (bio/path "/Users/chris")))
  (is (= (pathlib/Path "/Users/chris/Projects")
         (bio/path "/Users/chris" "Projects")))
  (is (= (pathlib/Path "/Users/chris/Projects/basilisp/src/basilisp")
         (bio/path "/Users/chris" "Projects" "basilisp" "src" "basilisp"))))

(deftest delete-test
  (let [path (bio/path tempdir "delete-test.txt")]
    (testing "not silently"
      (spit path "loud delete")
      (is (= true (bio/delete-file path)))
      (is (thrown? python/FileNotFoundError (bio/delete-file path))))

    (testing "silent delete"
      (spit path "quiet delete")
      (is (= true (bio/delete-file path true)))
      (is (= :a (bio/delete-file path :a))))))

(deftest reader-test
  (are [res src] (= res (slurp src))
    "hi there" (.encode "hi there" "utf-8")
    "hi there" (io/BytesIO (.encode "hi there" "utf-8"))
    "hi there" (io/StringIO "hi there"))

  (testing "local filenames"
    (let [[fd filename] (tempfile/mkstemp)]
      (try
        (spit filename "hi there")
        (is (= "hi there" (slurp filename)))
        (is (= "hi there" (slurp (str "file://" filename))))
        (finally
          (os/close fd)
          (os/unlink filename))))

    )

  (testing "http requests"
    (let [filename (pathlib/Path tempdir "reader-http-req.txt")]
      (spit filename "some text")
      (try
        (is (= "some text" (slurp (str "http://localhost:"
                                       http-server-port
                                       "/reader-http-req.txt"))))
        (finally
          (os/unlink filename)))))

  )

(deftest writer-test
  (is (thrown? basilisp.lang.exception/ExceptionInfo
               (spit (.encode "hi there" "utf-8") "more stuff!")))
  (is (thrown? basilisp.lang.exception/ExceptionInfo
               (spit (str "http://localhost:"
                          http-server-port
                          "/writer-http-req.txt")
                     "some fun text"))))
