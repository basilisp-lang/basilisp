(ns tests.basilisp.test-core-fns
  (:import time)
  (:require
   [basilisp.set :as set]
   [basilisp.test :refer [deftest are is testing]]))

(deftest vary-meta-test
  (testing "with lists"
    (let [l  '(:list)
          lm (with-meta '(:list) {:list true})]
      (is (nil? (meta l)))
      (is (= {:list true} (meta lm)))

      (let [l1 (vary-meta lm assoc :tag list)]
        (is (= lm l1))
        (is (= {:list true :tag list} (meta l1)))

        (let [l2 (vary-meta l1 dissoc :list)]
          (is (= l1 l2))
          (is (= {:tag list} (meta l2)))))))

  (testing "with maps"
    (let [m {:map true}
          mm ^:map {:map true}]
      (is (nil? (meta m)))
      (is (= {:map true} (meta mm)))

      (let [m1 (vary-meta mm assoc :tag map)]
        (is (= mm m1))
        (is (= {:map true :tag map} (meta m1)))

        (let [m2 (vary-meta m1 dissoc :map)]
          (is (= m1 m2))
          (is (= {:tag map} (meta m2)))))))

  (testing "with sets"
    (let [s  #{:set}
          sm ^:set #{:set}]
      (is (nil? (meta s)))
      (is (= {:set true} (meta sm)))

      (let [s1 (vary-meta sm assoc :tag set)]
        (is (= sm s1))
        (is (= {:set true :tag set} (meta s1)))

        (let [s2 (vary-meta s1 dissoc :set)]
          (is (= s1 s2))
          (is (= {:tag set} (meta s2)))))))

  (testing "with symbols"
    (let [s  'sym
          sm (with-meta 'sym {:symbol true})]
      (is (nil? (meta s)))
      (is (= {:symbol true} (meta sm)))

      (let [s1 (vary-meta sm assoc :tag symbol)]
        (is (= sm s1))
        (is (= {:symbol true :tag symbol} (meta s1)))

        (let [s2 (vary-meta s1 dissoc :symbol)]
          (is (= s1 s2))
          (is (= {:tag symbol} (meta s2)))))))

  (testing "with vectors"
    (let [v  [:vec]
          vm ^:vector [:vec]]
      (is (nil? (meta v)))
      (is (= {:vector true} (meta vm)))

      (let [v1 (vary-meta vm assoc :tag vector)]
        (is (= vm v1))
        (is (= {:tag vector :vector true} (meta v1)))

        (let [v2 (vary-meta v1 dissoc :vector)]
          (is (= v1 v2))
          (is (= {:tag vector} (meta v2))))))))

(deftest compare-test
  (testing "nil"
    (are [res x y] (= res (compare x y))
      0  nil nil
      -1 nil "a"
      1  "a" nil))

  (testing "boolean"
    (are [res x y] (= res (compare x y))
      0  true  true
      0  false false
      -1 false true
      1  true  false))

  (testing "numbers"
    (are [res x y] (= res (compare x y))
      1  ##NaN nil
      -1 nil   ##NaN

      0 ##NaN ##NaN
      0 ##NaN 1
      0 ##NaN 3.14
      0 ##NaN 22/7
      0 ##NaN 3.07M
      0 3.07M ##NaN
      0 1     ##NaN
      0 3.14  ##NaN
      0 3.14  ##NaN
      0 22/7  ##NaN

      0 1    1
      0 1    1.0
      0 1    1M
      0 2    10/5
      0 1.0  1
      0 1.0  1M
      0 1.0  1.0
      0 2.0  10/5
      0 1M   1M
      0 1M   1
      0 1M   1.0
      0 2M   10/5
      0 10/5 2
      0 10/5 2.0
      0 10/5 2M
      0 10/5 10/5

      1 3     1
      1 3     1.07
      1 3     2/5
      1 3     1.07M
      1 3.33  1.07
      1 3.33  1
      1 3.33  2/5
      1 3.33  1.07M
      1 3.33M 1.07M
      1 3.33M 1
      1 3.33M 1.07
      1 3.33M 10/5
      1 10/5  1
      1 10/5  1.0
      1 10/5  1.07M
      1 10/5  2/5

      -1 1     3
      -1 1.07  3
      -1 2/5   3
      -1 1.07M 3
      -1 1.07  3.33
      -1 1     3.33
      -1 2/5   3.33
      -1 1.07M 3.33
      -1 1.07M 3.33M
      -1 1     3.33M
      -1 1.07  3.33M
      -1 10/5  3.33M
      -1 1     10/5
      -1 1.07  10/5
      -1 1.07M 10/5
      -1 2/5   10/5))

  (testing "strings"
    (are [res x y] (= res (compare x y))
      0  "a" "a"
      -1 "a" "b"
      1  "b" "a"))

  (testing "keywords"
    (are [res x y] (= res (compare x y))
      0  :a :a
      -1 :a :b
      1  :b :a

      1  :a/b :b
      -1 :b   :a/b

      -1 :a/b :a/c
      -1 :a/b :b/b
      0  :a/b :a/b
      1  :a/c :a/b
      1  :b/b :a/b))

  (testing "symbols"
    (are [res x y] (= res (compare x y))
      0  'a 'a
      -1 'a 'b
      1  'b 'a

      1  'a/b 'b
      -1 'b   'a/b

      -1 'a/b 'a/c
      -1 'a/b 'b/b
      0  'a/b 'a/b
      1  'a/c 'a/b
      1  'b/b 'a/b))

  (testing "vectors"
    (are [res x y] (= res (compare x y))
      0  []  []
      -1 []  [1]
      1  [1] []

      0  [0 1 2] [0 1 2]
      -1 [0 1 2] [1 1 2]
      1  [1 1 2] [0 1 2]))

  (testing "un-comparables"
    (are [x y] (thrown? python/TypeError (compare x y))
      :a  'a
      :a  "a"
      'a  "a"
      'a  :a
      "a" 'a
      "a" :a

      [] '()

      '()      '()
      '(1 2 3) '(1 2 3)
      '(1 2 3) '(4 5 6)

      #{}      #{}
      #{1 2 3} #{1 2 3}
      #{1 2 3} #{4 5 6}

      {}          {}
      {:a 1 :b 2} {:a 1 :b 2}
      {:a 1 :b 2} {:c 3 :d 4})))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Collection Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest bounded-count-test
  (are [x n y] (= x (bounded-count n y))
    0 5 []
    0 5 '()
    0 5 {}
    0 5 #{}

    1 5 [:a]
    1 5 '(:a)
    1 5 {:a 1}
    1 5 #{:a}
    5 5 (range 5)

    4 2 [:a :b :c :d]
    2 2 '(:a :b :c :d)
    4 2 {:a 1 :b 2 :c 3 :d 4}
    4 2 #{:a :b :c :d}
    2 2 (range 5)))

(deftest not-empty-test
  (are [x] (nil? (not-empty x))
    []
    '()
    #{}
    {})
  (are [x] (= x (not-empty x))
    [:a]
    [:a :b :c]
    '(:a)
    '(:a :b :c)
    #{:a}
    #{:a :b :c}
    {:a 1}
    {:a 1 :b 2 :c :3}))

(deftest peek-test
  (are [x] (nil? (peek x))
    []
    '())
  (are [x y] (= x (peek y))
    :a '(:a)
    :a '(:a :b :c)
    :a [:a]
    :c [:a :b :c]))

(deftest pop-test
  (is (thrown? python/IndexError (pop '())))
  (is (thrown? python/IndexError (pop [])))
  (are [x y] (= x (pop y))
    '() '(:a)
    '(:b :c) '(:a :b :c)
    [] [:a]
    [:a :b] [:a :b :c]))

(deftest reverse-test
  (are [x y] (= x (reverse y))
    '() []
    '(1) [1]
    '(2 1) [1 2]
    '(1 2 3 4 5) [5 4 3 2 1]
    '(4 3 2 1) (range 1 5)))

(deftest reversible?-test
  (is (reversible? []))
  (is (reversible? [1 2 3 4]))
  (are [x] (not (reversible? x))
    '()
    '(1 2 3 4)
    #{}
    #{1 2 3 4}
    {}
    {:a 1 :b 2}))

(deftest rseq-test
  (are [x] (thrown? python/AttributeError (rseq x))
    '()
    '(1 2 3 4)
    #{}
    #{1 2 3 4}
    {}
    {:a 1 :b 2})
  (are [x y] (= x (rseq y))
    '() []
    '(1) [1]
    '(2 1) [1 2]
    '(3 2 1) [1 2 3]
    '(4 3 2 1) [1 2 3 4]
    '(:d :c :b :a) [:a :b :c :d]))

(deftest subvec-test
  (is (= [] (subvec [] 0)))
  (is (thrown? python/IndexError (subvec [] 3)))
  (is (thrown? python/IndexError (subvec [1 2 3 4 5] 6)))
  (is (= [:l :o :w :o :r :l :d] (subvec [:h :e :l :l :o :w :o :r :l :d] 3)))
  (is (thrown? python/IndexError (subvec [:h :e :l :l :o :w :o :r :l :d] 3 12)))
  (is (= [:l :o :w :o] (subvec [:h :e :l :l :o :w :o :r :l :d] 3 7)))
  (is (thrown? python/IndexError (subvec [:h :e :l :l :o :w :o :r :l :d] 12 3))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Transient Collections ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest transient-map-test
  (testing "always boolean true"
    (are [x] (true? (boolean (transient x)))
      {}
      {:a 1 :c 2}))

  (testing "callable"
    (are [x y z] (= z ((transient x) y))
      {}          :a nil
      {:a 1 :c 2} :a 1)

    (is (= :e ((transient {:a 1 :b 2}) :c :e))))

  (testing "count"
    (let [trx (volatile! (transient {:a 1 :b 2 :c 3}))]
      (is (= 3 (count @trx)))
      (vswap! trx dissoc! :b)
      (is (= 2 (count @trx)))
      (vswap! trx assoc! :e 5 :f 6)
      (is (= 4 (count @trx)))))

  (testing "equality"
    (let [src {:a 1 :b 2}
          trx (transient src)]
      (is (not (= src trx)))
      (is (not (= trx src)))
      (is (not (= trx (transient src))))
      (is (= trx trx))

      (let [prx (persistent! trx)]
        (is (= src prx))
        (is (not (identical? src prx))))))

  (testing "get"
    (are [x y z] (= z (get (transient x) y))
      {}          :a nil
      {:a 1 :c 2} :a 1)

    (is (= :e (get (transient {:a 1 :b 2}) :c :e))))

  (testing "not seqable"
    (is (thrown? python/TypeError (seq (transient {}))))))

(deftest transient-set-test
  (testing "always boolean true"
    (are [x] (true? (boolean (transient x)))
      #{}
      #{:a :b :c}))

  (testing "callable"
    (are [x y z] (= z ((transient x) y))
      #{}         :a nil
      #{:a :b :c} :a :a)

    (is (= :e ((transient #{:a :b :c}) :d :e))))

  (testing "count"
    (let [trx (volatile! (transient #{:a :b :c}))]
      (is (= 3 (count @trx)))
      (vswap! trx disj! :b)
      (is (= 2 (count @trx)))
      (vswap! trx conj! :e :f)
      (is (= 4 (count @trx)))))

  (testing "equality"
    (let [src #{:a :b :c}
          trx (transient src)]
      (is (not (= src trx)))
      (is (not (= trx src)))
      (is (not (= trx (transient src))))
      (is (= trx trx))

      (let [prx (persistent! trx)]
        (is (= src prx))
        (is (not (identical? src prx))))))

  (testing "get"
    (are [x y z] (= z (get (transient x) y))
      #{}         :a nil
      #{:a :b :c} :a :a)

    (is (= :e (get (transient #{:a :b :c}) :d :e))))

  (testing "not seqable"
    (is (thrown? python/TypeError (seq (transient #{}))))))

(deftest transient-vector-test
  (testing "always boolean true"
    (are [x] (true? (boolean (transient x)))
      []
      [:a :b :c]))

  (testing "count"
    (let [trx (volatile! (transient [:a :b :c]))]
      (is (= 3 (count @trx)))
      (vswap! trx pop!)
      (is (= 2 (count @trx)))
      (vswap! trx conj! :e :f)
      (is (= 4 (count @trx)))))

  (testing "equality"
    (let [src [:a :b :c]
          trx (transient src)]
      (is (not (= src trx)))
      (is (not (= trx src)))
      (is (not (= trx (transient src))))
      (is (= trx trx))

      (let [prx (persistent! trx)]
        (is (= src prx))
        (is (not (identical? src prx))))))

  (testing "get"
    (are [x y z] (= z (get (transient x) y))
      []         1  nil
      [:a :b :c] 1 :b)

    (is (= :e (get (transient [:a :b :c]) 4 :e))))

  (testing "not seqable"
    (is (thrown? python/TypeError (seq (transient []))))))

(deftest assoc!-test
  (testing "maps"
    (let [tm (transient {})]
      (is (= {:a 1 :b 2 :c 3}
             (-> (assoc! tm :a 1)
                 (assoc! :b 2 :c 3)
                 (persistent!))))))

  (testing "vectors"
    (let [tv (transient [:a :b :c])]
      (is (= [:c :a :b :d]
             (-> (assoc! tv 0 :c)
                 (assoc! 1 :a 2 :b)
                 (assoc! 3 :d)
                 (persistent!)))))))

(deftest conj!-test
  (is (= [] (persistent! (conj!))))

  (testing "maps"
    (let [tm (transient {})]
      (is (= {:a 1 :b 2 :c 3 :d 4 :e 5}
             (-> (conj! tm {:a 1})
                 (conj! {:a 1} #py {:b 2})
                 (conj! [:c 3] nil (map-entry :d 4))
                 (conj! #py (:e 5))
                 (persistent!)))))

    (is (thrown? python/ValueError (conj! (transient {}) :a))))

  (testing "sets"
    (let [ts (transient #{:a :b :c})]
      (is (= #{:a :b :c :d :e :f}
             (-> (conj! ts :a)
                 (conj! :c :d)
                 (conj! :e :f)
                 (persistent!))))))

  (testing "vectors"
    (let [ts (transient [:a])]
      (is (= [:a :a :c :d :e :f]
             (-> (conj! ts :a)
                 (conj! :c :d)
                 (conj! :e :f)
                 (persistent!)))))))

(deftest disj!-test
  (is (= #{:a} (persistent! (disj! (transient #{:a})))))

  (let [ts (transient #{:a :b :c})]
    (is (= #{:c} (-> (disj! ts :e)
                     (disj! :b)
                     (disj! :a :g)
                     (persistent!))))))

(deftest dissoc!-test
  (let [tm (transient {:a 1 :b 2 :c 3})]
    (is (= {:c 3} (-> (dissoc! tm :e)
                      (dissoc! :b)
                      (dissoc! :a :g)
                      (persistent!))))))

(deftest pop!-test
  (let [tv (transient [:a :b :c])]
    (is (= [:a] (-> (pop! tv)
                    (pop!)
                    (persistent!)))))

  (is (thrown? python/IndexError (pop! (transient [])))))

;;;;;;;;;;;;;;;
;; Volatiles ;;
;;;;;;;;;;;;;;;

(deftest volatile-test
  (let [v (volatile! :a)]
    (is (not (volatile? :a)))
    (is (not (volatile? (atom :a))))
    (is (volatile? v))
    (is (= :a @v))
    (is (= :b (vreset! v :b)))
    (is (= :b @v))
    (is (= :b/a (vswap! v #(keyword (name %) "a"))))
    (is (= :b/a @v))))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Transducer Utilities ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest reduced-test
  (is (not (reduced? [])))
  (is (reduced? (reduced [])))
  (is (= [] @(reduced [])))

  (testing "ensure-reduced"
    (is (reduced? (ensure-reduced [])))
    (is (reduced? (ensure-reduced (reduced []))))
    (is (not (reduced? @(ensure-reduced (reduced []))))))

  (testing "unreduced"
    (is (not (reduced? (unreduced (reduced [])))))
    (is (= [] (unreduced (reduced []))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Higher Order and Collection Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest reduce-test
  (testing "with no init"
    (are [coll f res] (= res (reduce f coll))
      []                                + 0
      [1]                               + 1
      [1 2 3]                           + 6
      (filter odd? [1 2 3 4 5 6 7 8 9]) + 25))

  (testing "with an init"
    (are [coll f init res] (= res (reduce f init coll))
      []                                + 45 45
      [1]                               + 45 46
      [1 2 3]                           + 45 51
      (filter odd? [1 2 3 4 5 6 7 8 9]) + 25 50))

  (testing "return early"
    (let [f (fn []
              (let [idx (volatile! 0)]
                (fn
                  ([x] x)
                  ([x y]
                   (let [new-idx (vswap! idx inc)]
                     (if (> new-idx 3)
                       (reduced x)
                       (+ x y)))))))]
      (is (= 6 (reduce (f) (range))))
      (is (= 9 (reduce (f) 6 (range)))))))

(deftest reduce-kv-test
  (testing "reduce-kv does not execute f if no elems in coll"
    (let [a (atom false)]
      (is (= {:init true}
             (reduce-kv (fn [_ _ _]
                          (reset! a true))
                        {:init true}
                        [])))))

  (testing "reduce-kv"
    (is (= {1 :a, 2 :b, 3 :c}
           (reduce-kv #(assoc %1 %3 %2) {} {:a 1 :b 2 :c 3}))))

  (testing "return early"
    (let [idx (volatile! 0)
          f   (fn
                [m k v]
                (let [new-idx (vswap! idx inc)]
                  (if (> new-idx 3)
                    (reduced m)
                    (assoc m k v))))]
      (is (= 3 (count (reduce-kv f {} {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6})))))))

(deftest every-pred-test
  (is (= true ((every-pred odd?) 3 5 9)))
  (is (= true ((every-pred odd? int?) 3 5 9 17)))
  (is (= false ((every-pred odd? neg? int?) -3 -2)))
  (is (= false ((every-pred odd? neg? int?) -3 -1 7)))
  (is (= false ((every-pred odd? neg? int?) -3 -1 -3.0))))

(deftest some-fn-test
  (is (= 1 ((some-fn :a) {:a 1 :c 2})))
  (is (= 1 ((some-fn :a :b) {:a 1 :c 2})))
  (is (= 2 ((some-fn :a :b :c) {:d 4} {:c 2})))
  (is (= nil ((some-fn :a :b :c) {})))
  (is (= nil ((some-fn :a :b :c) {:e 5} {:d 4})))
  (is (= nil ((some-fn :a :b :c) {:e 5 :d 4} {}))))

(deftest map-test
  (testing "transducer"
    (are [res input] (= res (into [] (map inc) input))
      []           []
      [6 7 8 9 10] (range 5 10))

    (is (= '([1 4] [2 5] [3 6])
           (vec (sequence (map vector) [1 2 3] [4 5 6])))))

  (testing "higher order function"
    (are [res s] (= res s)
      '()      (map identity [])
      '(1 2 3) (map identity [1 2 3])
      '(2 3 4) (map inc [1 2 3])
      '(5 7 9) (map + [1 2 3] [4 5 6])
      '(5 7 9) (map + [1 2 3] (range 4 10)))))

(deftest map-indexed-test
  (testing "transducer"
    (= [[0 1] [1 2] [2 3]]
       (into [] (map-indexed vector) [1 2 3])))

  (testing "higher order function"
    (is (= '([0 1] [1 2] [2 3]) (map-indexed vector [1 2 3])))))

(deftest mapcat-test
  (testing "transducer"
    (are [res input] (= res (into [] (mapcat #(vector % (inc %))) input))
      []            []
      [1 2 2 3 3 4] [1 2 3])

    #_(is (= '(1 4 7 2 5 8 3 6 9)
           (sequence (mapcat vector) [1 2 3] [4 5 6] [7 8 9]))))

  (testing "higher order function"
    (are [res input] (= res (mapcat #(vector % (inc %)) input))
      '()            []
      '(1 2 2 3 3 4) [1 2 3])

    (is (= [1 4 2 5 3 6] (mapcat vector [1 2 3] [4 5 6])))))

(deftest filter-test
  (testing "transducer"
    (are [res f input] (= res (into [] (filter f) input))
      [1 3 5] odd? [1 2 3 4 5]
      [1 3 5] odd? [1 2 3 4 5 6]))

  (testing "higher order function"
    (are [res f input] (= res (filter f input))
      '()        identity []
      '(1 2 3 4) identity [1 2 3 4]
      '(1 3)     odd?     [1 2 3 4]
      '(1 3 5)   odd?     [1 2 3 4 5])))

(deftest remove-test
  (testing "transducer"
    (are [res f input] (= res (into [] (remove f) input))
      [2 4]   odd? [1 2 3 4 5]
      [2 4 6] odd? [1 2 3 4 5 6]))

  (testing "higher order function"
    (are [res f input] (= res (remove f input))
      '()      identity []
      '()      identity [1 2 3 4]
      '(2 4)   odd?     [1 2 3 4]
      '(2 4 6) odd?     [1 2 3 4 5 6])))

(deftest keep-test
  (testing "transducer"
    (are [res input] (= res (into [] (keep identity) input))
      []            []
      [:a :b :c]    [:a :b :c]
      [:a :b :c]    [:a :b nil :c]
      [:a :b :c]    [:a :b nil nil :c]
      [:a :b :c :d] [:a :b nil :c nil nil :d]))

  (testing "higher order function"
    (are [res input] (= res (keep identity input))
      '()            []
      '(:a :b :c)    [:a :b :c]
      '(:a :b :c)    [:a :b nil :c]
      '(:a :b :c)    [:a :b nil nil :c]
      '(:a :b :c :d) [:a :b nil :c nil nil :d])))

(deftest keep-indexed-test
  (testing "transducer"
    (let [f (fn [i v] v)]
      (are [res input] (= res (into [] (keep-indexed f) input))
        []            []
        [:a :b :c]    [:a :b :c]
        [:a :b :c]    [:a :b nil :c]
        [:a :b :c]    [:a :b nil nil :c]
        [:a :b :c :d] [:a :b nil :c nil nil :d])))

  (testing "higher order function"
    (let [f (fn [i v] v)]
      (are [res input] (= res (keep-indexed f input))
        '()            []
        '(:a :b :c)    [:a :b :c]
        '(:a :b :c)    [:a :b nil :c]
        '(:a :b :c)    [:a :b nil nil :c]
        '(:a :b :c :d) [:a :b nil :c nil nil :d]))))

(deftest take-test
  (testing "transducer"
    (are [res n input] (= res (into [] (take n) input))
      []      3 []
      []      0 [1 2 3]
      [1]     1 [1 2 3]
      [1 2]   2 [1 2 3]
      [1 2 3] 3 [1 2 3]))

  (testing "higher order function"
    (are [res n input] (= res (take n input))
      '()      3 []
      '()      0 [1 2 3]
      '(1)     1 [1 2 3]
      '(1 2)   2 [1 2 3]
      '(1 2 3) 3 [1 2 3])))

(deftest take-while-test
  (testing "transducer"
    (are [res f input] (= res (into [] (take-while f) input))
      []        odd?  []
      []        even? [1 3 5 7]
      []        odd?  [2 3 5 7]
      [1 3 5]   odd?  [1 3 5 2]
      [1 3 5 7] odd?  [1 3 5 7]
      [1]       odd?  [1 2 3 4]))

  (testing "higher order function"
    (are [res f input] (= res (take-while f input))
      '()        odd?  []
      '()        even? [1 3 5 7]
      '()        odd?  [2 3 5 7]
      '(1 3 5)   odd?  [1 3 5 2]
      '(1 3 5 7) odd?  [1 3 5 7]
      '(1)       odd?  [1 2 3 4])))

(deftest drop-test
  (testing "transducer"
    (are [res n input] (= res (into [] (drop n) input))
      []      3 []
      []      3 [1 2 3]
      [1 2 3] 0 [1 2 3]
      [2 3]   1 [1 2 3]
      [3]     2 [1 2 3]
      [4]     3 [1 2 3 4]))

  (testing "higher order function"
    (are [res n input] (= res (drop n input))
      '()      3 []
      '()      3 [1 2 3]
      '(1 2 3) 0 [1 2 3]
      '(2 3)   1 [1 2 3]
      '(3)     2 [1 2 3]
      '(4)     3 [1 2 3 4])))

(deftest drop-while-test
  (testing "transducer"
    (are [res input] (= res (into [] (drop-while odd?) input))
      []        []
      []        [1 3 5 7]
      [2]       [1 3 5 2]
      [2 3 4]   [1 2 3 4]
      [2 4 6 8] [2 4 6 8]))

  (testing "higher order function"
    (are [res input] (= res (drop-while odd? input))
      '()        []
      '()        [1 3 5 7]
      '(2)       [1 3 5 2]
      '(2 3 4)   [1 2 3 4]
      '(2 4 6 8) [2 4 6 8])))

(deftest take-nth-test
  (testing "transducer"
    (are [res n input] (= res (into [] (take-nth n) input))
      []          0 []
      [1]         0 [1]
      [1]         0 [1 2 3]
      [1 2 3 4 5] 1 [1 2 3 4 5]
      [1 3 5]     2 [1 2 3 4 5]
      [1 4]       3 [1 2 3 4 5]))

  (testing "higher order function"
    (are [res input] (= res (take 1 (take-nth 0 input)))
      '()  []
      '(1) [1]
      '(1) [1 2 3])
    (are [res n input] (= res (take-nth n input))
      '(1 2 3 4 5) 1 [1 2 3 4 5]
      '(1 3 5)     2 [1 2 3 4 5]
      '(1 4)       3 [1 2 3 4 5])))

(deftest frequencies-test
  (are [res input] (= res (frequencies input))
    {}               '()
    {}               []
    {:a 1}           '(:a)
    {:a 1}           [:a]
    {:a 3 :b 1}      '(:a :a :a :b)
    {:a 3 :b 1}      [:a :a :a :b]
    {:a 4 :b 1 :c 2} '(:a :a :a :b :c :c :a)
    {:a 4 :b 1 :c 2} [:a :a :a :b :c :c :a]))

(deftest interpose-test
  (testing "transducer"
    (are [input sep res] (= res (into [] (interpose sep) input))
      []             "," []
      ["hi"]         "," ["hi"]
      ["hi" "there"] "," ["hi" "," "there"]))

  (testing "higher order function"
    (are [input sep res] (= res (interpose sep input))
      []             "," '()
      ["hi"]         "," '("hi")
      ["hi" "there"] "," '("hi" "," "there"))))

(deftest interleave-test
  (is (= '() (interleave)))
  (is (= '(1 2 3) (interleave [1 2 3])))
  (is (= '(1 :a 2 :b 3 :c) (interleave [1 2 3] [:a :b :c])))
  (is (= '(1 :a d 2 :b e 3 :c f)
         (interleave [1 2 3] [:a :b :c] ['d 'e 'f])))
  (is (= '(1 :a d 2 :b e)
         (interleave [1 2 3] [:a :b] ['d 'e 'f]))))

(deftest partition-all-test
  (testing "transducer"
    (are [res input] (= res (into [] (partition-all 3) input))
      [[1]]                 [1]
      [[0 1 2] [3 4 5]]     (range 6)
      [[0 1 2] [3 4 5] [6]] (range 7)))

  (testing "no step"
    (are [res n coll] (= res (partition-all n coll))
      '((1 2) (3 4) (5 6)) 2 (range 1 7)
      '((1 2 3) (4 5 6))   3 (range 1 7)))

  (testing "with step"
    (are [res n step coll] (= res (partition-all n step coll))
      '((1 2 3 4 5) (11 12 13 14 15) (21 22 23)) 5 10 (range 1 24)
      '((1 2 3 4 5) (11 12 13 14 15) (21 22 23 24 25) 5 10 (range 1 26)))))

(deftest partition-by-test
  (testing "transducer"
    (are [res input] (= res (into [] (partition-by odd?) input))
      [[1]]                 [1]
      [[1 3 5 7 9 11]]      [1 3 5 7 9 11]
      [[1 1 1] [2 2] [3 3]] [1 1 1 2 2 3 3]))

  (testing "higher order function"
    (are [res coll] (= res (partition-by odd? coll))
      '()                    []
      '((1 1 1) (2 2) (3 3)) [1 1 1 2 2 3 3])))

(deftest distinct-test
  (testing "transducer"
    (are [res input] (= res (into [] (distinct) input))
      []         []
      [:a]       [:a]
      [:a :b]    [:a :b]
      [:a :b :c] [:a :b :c]
      [:a :b :c] [:a :a :a :b :c]
      [:a :b :c] [:a :a :a :b :c :a]))

  (testing "higher order function"
    (are [res input] (= res (distinct input))
      '()         []
      '(:a)       [:a]
      '(:a :b)    [:a :b]
      '(:a :b :c) [:a :b :c]
      '(:a :b :c) [:a :a :a :b :c]
      '(:a :b :c) [:a :a :a :b :c :a])))

(deftest dedupe-test
  (testing "transducer"
    (are [res input] (= res (into [] (dedupe) input))
      []            []
      [:a]          [:a]
      [:a :b]       [:a :b]
      [:a :b :c]    [:a :b :c]
      [:a :b :c]    [:a :a :a :b :c]
      [:a :b :c :a] [:a :a :a :b :c :a]
      [:a :b :c :a] [:a :a :a :b :c :c :a]))

  (testing "higher order function"
    (are [res input] (= res (dedupe input))
      '()            []
      '(:a)          [:a]
      '(:a :b)       [:a :b]
      '(:a :b :c)    [:a :b :c]
      '(:a :b :c)    [:a :a :a :b :c]
      '(:a :b :c :a) [:a :a :a :b :c :a]
      '(:a :b :c :a) [:a :a :a :b :c :c :a])))

(deftest flatten-test
  (are [x y] (= x (flatten y))
    '() 1
    '() :a
    '() ""
    '() "a string"
    '(1) [1]
    '(1) [[1]]
    '(1) [[[1]]]
    '(1 2 3) [[[1]] 2 [3]]))

(deftest min-key-test
  (is (= "dsd" (max-key count "asd" "bsd" "dsd")))
  (is (= "long word" (max-key count "asd" "bsd" "dsd" "long word")))
  (is (= "long word" (max-key count "long word" "asd" "bsd" "dsd"))))

(deftest max-key-test
  (is (= "dsd" (min-key count "asd" "bsd" "dsd")))
  (is (= "dsd" (min-key count "asd" "bsd" "dsd" "long word")))
  (is (= "a" (min-key count "a" "bsd" "dsd" "long word"))))

(deftest sort-by-test
  (testing "no cmp function"
    (is (= '() (sort-by count [])))
    (is (= '([:a] [5 5] [1 2 3])
           (sort-by count [[1 2 3] [:a] [5 5]]))))

  (testing "with cmp function"
    (let [cmp (fn [v1 v2] (- v2 v1))]
      (is (= '() (sort-by count cmp [])))
      (is (= '([1 2 3] [5 5] [:a])
             (sort-by count cmp [[1 2 3] [:a] [5 5]]))))))

(deftest zipmap-test
  (are [x y z] (= x (zipmap y z))
    {} [] []
    {} [:a] []
    {} [] [1]
    {:a 1} [:a] [1]
    {:a 1 :b 2} [:a :b] [1 2]
    {:a 1 :b 2} [:a :b :c] [1 2]
    {:a 1 :b 2} [:a :b] [1 2]
    {:a 0 :b 1} [:a :b] (range)))

(deftest trampoline-test
  (let [a (atom [])]
    (trampoline (fn [v]
                  (swap! a conj :a)
                  (fn []
                    (swap! a conj :b)))
                "idiot")
    (is (= [:a :b] @a))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Associative Functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftest replace-test
  (testing "transducer"
    (are [smap input res] (= res (into [] (replace smap) input))
      '{0 ZERO, 1 ONE, 2 TWO}                 '(This is the code 0 1 2 0) '[This is the code ZERO ONE TWO ZERO]
      {2 :two, 4 :four}                       [4 2 3 4 5 6 2]             [:four :two 3 :four 5 6 :two]
      [10 9 8 7 6]                            [0 2 4]                     [10 8 6]
      [:zeroth :first :second :third :fourth] [0 2 4 0]                   [:zeroth :second :fourth :zeroth]))

  (testing "higher order function"
    (are [smap input res] (= res (replace smap input))
      '{0 ZERO, 1 ONE, 2 TWO}                 '(This is the code 0 1 2 0) '(This is the code ZERO ONE TWO ZERO)
      {2 :two, 4 :four}                       [4 2 3 4 5 6 2]             [:four :two 3 :four 5 6 :two]
      [10 9 8 7 6]                            [0 2 4]                     [10 8 6]
      [:zeroth :first :second :third :fourth] [0 2 4 0]                   [:zeroth :second :fourth :zeroth])))

;;;;;;;;;;;;;;;;;;;;;;
;; String Functions ;;
;;;;;;;;;;;;;;;;;;;;;;

(deftest subs-test
  (is (= "" (subs "" 0)))
  (is (thrown? python/IndexError (subs "" 3)))
  (is (thrown? python/IndexError (subs "hello" 6)))
  (is (= "lo world" (subs "hello world" 3)))
  (is (thrown? python/IndexError (subs "hello world" 3 12)))
  (is (= "lo w" (subs "hello world" 3 7)))
  (is (thrown? python/IndexError (subs "hello world" 12 3))))

;;;;;;;;;;;;;
;; Futures ;;
;;;;;;;;;;;;;

(deftest futures-test
  (testing "successful future"
    (let [fut (future 1)]
      (is (= 1 @fut))
      (is (= 1 @fut))
      (is (= false (future-cancel fut)))
      (is (= false (future-cancelled? fut)))
      (is (= true (future-done? fut)))
      (is (= true (realized? fut)))))

  (testing "timed deref of future"
    (let [fut (future (time/sleep 3))]
      (is (= :timed-out (deref fut 0.01 :timed-out)))
      (is (= false (future-cancelled? fut)))
      (is (= false (future-done? fut)))
      ;; can't always cancel a sleep-ed Future
      (future-cancel fut))))

(deftest pmap-test
  (binding [*pmap-cpu-count* 2]
    (let [slow (fn slow [x]
                 (time/sleep 0.5)
                 (+ x 10))]
      (is (= [] (vec (pmap slow []))))
      (is (= [11] (vec (pmap slow [1]))))
      (is (= [11 12 13 14 15 16 17 18 19]
             (vec (pmap slow (range 1 10))))))))

(deftest pcalls-test
  (binding [*pmap-cpu-count* 2]
    (let [slow (fn slow [x]
                 (time/sleep 0.5)
                 (+ x 10))]
      (is (= [] (vec (pcalls))))
      (is (= [11] (vec (pcalls #(slow 1)))))
      (is (= [11 12 13 14]
             (vec (pcalls #(slow 1)
                          #(slow 2)
                          #(slow 3)
                          #(slow 4))))))))

(deftest pvalues-test
  (binding [*pmap-cpu-count* 2]
    (let [slow (fn slow [x]
                 (time/sleep 0.5)
                 (+ x 10))]
      (is (= [] (vec (pvalues))))
      (is (= [11] (vec (pvalues (slow 1)))))
      (is (= [11 12 13 14]
             (vec (pvalues (slow 1)
                           (slow 2)
                           (slow 3)
                           (slow 4))))))))

;;;;;;;;;;;;
;; Arrays ;;
;;;;;;;;;;;;

(deftest to-array-test
  (is (= #py [] (to-array [])))
  (is (= #py [] (to-array '())))
  (is (= #py [1] (to-array [1])))
  (is (= #py [1 2 3] (to-array [1 2 3])))
  (is (= #py [1] (to-array '(1))))
  (is (= #py [1 2 3] (to-array '(1 2 3)))))

(deftest to-array-2d-test
  (is (= #py [] (to-array-2d [])))
  (is (= #py [] (to-array-2d '())))

  (is (= #py [#py [] #py []] (to-array-2d [[] ()])))
  (is (= #py [#py [] #py []] (to-array-2d '([] ()))))

  (is (= #py [#py [1 2 3] #py [:a :b :c]]
         (to-array-2d [[1 2 3] '(:a :b :c)])))

  (is (= #py [#py [1 2 3] #py [:a :b :c]]
         (to-array-2d '([1 2 3] (:a :b :c)))))

  (is (thrown? python/TypeError)
      (to-array-2d [[1 2 3] :b])))

(deftest into-array-test
  (testing "with no type"
    (is (= #py [] (into-array [])))
    (is (= #py [] (into-array '())))
    (is (= #py [1] (into-array [1])))
    (is (= #py [1 2 3] (into-array [1 2 3])))
    (is (= #py [1] (into-array '(1))))
    (is (= #py [1 2 3] (into-array '(1 2 3)))))

  (testing "with (ignored) type argument"
    (is (= #py [] (into-array nil [])))
    (is (= #py [] (into-array nil '())))
    (is (= #py [1] (into-array python/int [1])))
    (is (= #py [1 2 3] (into-array python/int [1 2 3])))
    (is (= #py [1] (into-array python/float '(1))))
    (is (= #py [1 2 3] (into-array python/float '(1 2 3))))))

(deftest make-array-test
  (testing "with no type"
    (is (= #py [] (make-array 0)))
    (is (= #py [nil] (make-array 1)))
    (is (= #py [nil nil nil] (make-array 3))))

  (testing "with (ignored) type argument"
    (is (= #py [] (make-array python/int 0)))
    (is (= #py [nil] (make-array python/int 1)))
    (is (= #py [nil nil nil] (make-array python/int 3))))

  (testing "multi-dimensional"
    (is (= #py [#py [] #py []]
           (make-array python/int 2 0)))
    (is (= #py [#py [nil nil nil] #py [nil nil nil]]
           (make-array python/int 2 3)))
    (is (= #py [#py [#py [nil nil] #py [nil nil]]
                #py [#py [nil nil] #py [nil nil]]]
           (make-array python/int 2 2 2)))))

(deftest object-array-tests
  (testing "only size"
    (is (= #py [] (object-array 0)))
    (is (= #py [nil] (object-array 1)))
    (is (= #py [nil nil nil] (object-array 3))))

  (testing "only seq"
    (is (= #py [] (object-array [])))
    (is (= #py [] (object-array '())))
    (is (= #py [1] (object-array [1])))
    (is (= #py [1 2 3] (object-array [1 2 3])))
    (is (= #py [1] (object-array '(1))))
    (is (= #py [1 2 3] (object-array '(1 2 3)))))

  (testing "size and init val"
    (is (= #py [] (object-array 0 :a)))
    (is (= #py [:a] (object-array 1 :a)))
    (is (= #py [:a :a :a] (object-array 3 :a))))

  (testing "size and seq"
    (is (= #py [] (object-array 0 (range 1 3))))
    (is (= #py [1 2 3] (object-array 3 (range 1 4))))
    (is (= #py [1 2 3 nil nil] (object-array 5 (range 1 4))))))

(deftest aclone-test
  (is (= #py [] (aclone [])))
  (is (= #py [] (aclone '())))
  (is (= #py [1] (aclone [1])))
  (is (= #py [1 2 3] (aclone [1 2 3])))
  (is (= #py [1] (aclone '(1))))
  (is (= #py [1 2 3] (aclone '(1 2 3)))))

(deftest alength-test
  (is (= 0 (alength #py [])))
  (is (= 1 (alength #py [1])))
  (is (= 3 (alength #py [1 2 3]))))

(deftest aget-test
  (is (thrown? python/IndexError (aget #py [] 1)))
  (is (thrown? python/IndexError (aget #py [1 2 3] 5)))
  (is (thrown? python/IndexError (aget #py [#py[1 0 6] 2 3] 0 5)))
  (is (= 1 (aget #py [1 2 3] 0)))
  (is (= :d (aget #py [#py [:a :b :c] #py [:d :e :f]] 1 0))))

(deftest aset-test
  (let [l #py [1 2 3]]
    (is (= :a (aset l 0 :a)))
    (is (= #py [:a 2 3] l))
    (is (thrown? python/IndexError (aset l 5 :f))))

  (let [l #py [#py [:a :b :c] #py [:d :e :f]]]
    (is (= 5 (aset l 0 2 5)))
    (is (= #py [#py [:a :b 5] #py [:d :e :f]] l))
    (is (thrown? python/IndexError (aset l 0 5 :cc)))))

;;;;;;;;;;;;;;;;
;; Interfaces ;;
;;;;;;;;;;;;;;;;

(deftest gen-interface-test
  (are [x] (thrown? basilisp.lang.exception/ExceptionInfo x)
    (gen-interface :name "TestInterface"
                   :methods '[(method [thing])
                              (method [other-thing])])
    (gen-interface :name "TestInterface"
                   :methods '[(method [thing & args])
                              (method [& args])])
    (gen-interface :name "TestInterface"
                   :methods '[(method [thing1 thing2])
                              (method [& args])]))

  (is (not (nil? (gen-interface :name "TestInterface"))))

  (are [arity-names methods] (let [interface (gen-interface :name "TestInterface"
                                                            :methods methods)]
                               (set/superset? (set (python/dir interface))
                                              (set arity-names)))
    [] []

    ["method"]
    '[(method [arg])]

    ["method" "_method_arity1" "_method_arity2"]
    '[(method [arg]) (method [arg1 arg2])]

    ["method" "other" "_other_arity1" "_other_arity3" "_other_arity_rest"]
    '[(method [arg])
      (other [arg])
      (other [arg1 arg2 arg3])
      (other [arg1 arg2 arg3 & rest-arg])]))

;;;;;;;;;;;;;;;;;
;; Transducers ;;
;;;;;;;;;;;;;;;;;

(deftest eduction-test
  (is (= '(1 9 49 81)
         (seq (eduction (mapcat identity)
                        (filter odd?)
                        (map (fn [x] (* x x)))
                        (take 5)
                        [(range 5) (range 6 10)]))))
  (is (= '(1 9 25 49 81)
         (seq (eduction (map inc)
                        (filter odd?)
                        (map (fn [x] (* x x)))
                        (take 5)
                        (range)))))
  (is (= '(1 9 49 81 121)
         (seq (eduction (mapcat identity)
                        (filter odd?)
                        (map (fn [x] (* x x)))
                        (take 5)
                        [(range 5) (range 6 10) (range 11 20)]))))
  (is (= '(1 9 49 81 121 169 225 289 361)
         (seq (eduction (mapcat identity)
                        (filter odd?)
                        (map (fn [x] (* x x)))
                        [(range 5) (range 6 10) (range 11 20)])))))

(deftest halt-when-test
  (is (= 5 (transduce (comp (map inc)
                            (halt-when #(>= % 5)))
                      +
                      0
                      (range))))
  (is (= 10 (transduce (comp (map inc)
                             (halt-when #(>= % 5)
                                        (fn [result _] result)))
                       +
                       0
                       (range)))))

(deftest sequence-test
  (testing "single arity"
    (are [x y] (= x (sequence y))
      '() '()
      '() []
      '() #{}
      '() {}
      '(0 1 2 3) [0 1 2 3]
      '(0 1 2 3) '(0 1 2 3)
      '(0 1 2 3) (range 4)))

  (testing "tranducer with one coll"
    (is (= '(1 2 3 4 5 6 7 8 9)
           (sequence (comp (mapcat vector) cat) [[1 2 3] [4 5 6] [7 8 9]])))
    (is (= '(1 2 3 4 5 6 7 8 9)
           (sequence (mapcat identity) [[1 2 3] [4 5 6] [7 8 9]])))
    (is (= '(1 9 25 49 81)
           (sequence (comp (map inc)
                           (filter odd?)
                           (map (fn [x] (* x x)))
                           (take 5))
                     (range))))
    (is (= '(1 9 49 81)
           (sequence (comp  (mapcat identity)
                            (filter odd?)
                            (map (fn [x] (* x x)))
                            (take 5))
                     [(range 5) (range 6 10)]))))

  (testing "transducer with multiple colls"
    (is (= '([1 4 7] [2 5 8] [3 6 9])
           (sequence (map vector) [1 2 3] [4 5 6] [7 8 9])))
    (is (= '(1 4 7 2 5 8 3 6 9)
           (sequence (mapcat vector) [1 2 3] [4 5 6] [7 8 9])))
    (is (= '(1 49 9 81)
           (sequence (comp  (mapcat vector)
                            (filter odd?)
                            (map (fn [x] (* x x)))
                            (take 5))
                     (range 5)
                     (range 6 10))))
    (is (= '(121 1 49 169 9)
           (sequence (comp  (mapcat vector)
                            (filter odd?)
                            (map (fn [x] (* x x)))
                            (take 5))
                     (range 5)
                     (range 6 10)
                     (range 11 16))))))
