(ns tests.basilisp.contrib.test-cli-tools
  (:require
   [basilisp.contrib.cli-tools :as cli]
   [basilisp.test :refer [deftest are is testing]])
  (:import argparse))

(def ^:private base-parser-config
  {:command      "command"
   :description  "This command foos the bars."
   :allow-abbrev true
   :arguments    []
   :commands     []})

(def ^:private base-arg-config
  {:name     "foo"
   :parse-fn int
   :validate [pos? "foo must be positive"]
   :default  "yes"
   :metavar  "FOO"
   :help     "Add extra foos into the bars."})

(def ^:private base-flag-config
  {:flags    ["-f" "--foo"]
   :parse-fn int
   :validate [pos? "foo must be positive"]
   :default  "yes"
   :metavar  "FOO"
   :help     "Add extra foos into the bars."})

(deftest cli-parser-spec-validation
  (testing "disallow name and flags"
    (is (thrown? basilisp.lang.exception/ExceptionInfo
                 (-> base-arg-config
                     (assoc :flags ["-f" "--foo"])
                     (->> (update base-parser-config :arguments conj))
                     (cli/cli-parser)))))

  (testing "disallow assoc-fn and update-fn"
    (is (thrown? basilisp.lang.exception/ExceptionInfo
                 (-> base-arg-config
                     (assoc :assoc-fn assoc :update-fn (fnil inc 0))
                     (->> (update base-parser-config :arguments conj))
                     (cli/cli-parser)))))

  (testing "disallow exclusive-group and group"
    (is (thrown? basilisp.lang.exception/ExceptionInfo
                 (-> base-arg-config
                     (assoc :group :foos :exclusive-group :bars)
                     (->> (update base-parser-config :arguments conj))
                     (cli/cli-parser))))))

(defn parse-args
  [parser args]
  (try
    (cli/parse-args parser args)
    (catch python/SystemExit _ nil)))

(deftest cli-parser
  (let [parser (cli/cli-parser
                {:command       "basilisp"
                 :description   "Basilisp is a Lisp dialect inspired by Clojure targeting Python 3"
                 :exit-on-error false
                 :arguments     []
                 :commands      [{:command     "run"
                                  :description "Run a Basilisp script from a file or run Basilisp code directly."
                                  :help        "run a Basilisp script or code"
                                  :handler     identity
                                  :arguments   [{:name "file-or-code"
                                                 :help "the filename or, if using -c the code, to execute"}
                                                {:flags   ["--in-ns"]
                                                 :help    "namespace to run the code in"
                                                 :default "basilisp.user"}
                                                {:flags     ["-c" "--code"]
                                                 :help      "if provided, treat argument as a string of code"
                                                 :default   false
                                                 :update-fn (constantly true)}
                                                {:flags ["--warn-on-shadowed-name"]
                                                 :help  "if provided, emit warnings if a local name is shadowed by another local name"
                                                 :env   "BASILISP_WARN_ON_SHADOWED_NAME"
                                                 :group "compiler flags"}
                                                {:flags ["--warn-on-shadowed-var"]
                                                 :help  "if provided, emit warnings if a Var name is shadowed by a local name"
                                                 :env   "BASILISP_WARN_ON_SHADOWED_VAR"
                                                 :group "compiler flags"}]}
                                 {:command       "run-all"
                                  :description   "Run multiple Basilisp scripts in parallel."
                                  :help          "run multiple Basilisp scripts in parallel"
                                  :exit-on-error false
                                  :handler       identity
                                  :arguments     [{:name  "files"
                                                   :help  "the filename or, if using -c the code, to execute"
                                                   :nargs "+"}
                                                  {:flags    ["-p" "--parallel"]
                                                   :help     "if provided, number of parallel workres"
                                                   :default  1
                                                   :validate [pos? "must be positive"]
                                                   :parse-fn python/int}
                                                  {:flags     ["-v" "--verbose"]
                                                   :help      "increase verbosity level; may be specified multiple times"
                                                   :default   1
                                                   :update-fn inc}]}]})]
    (are [args] (thrown? argparse/ArgumentError (parse-args parser args))
      ["run-all" "-p" "-1" "script.lpy"]
      ["run-all" "-p" "hi" "script.lpy"])

    (are [args ret] (= ret (dissoc (parse-args parser args) :handler))
      [] {}

      ["run" "--in-ns" "basilisp.contrib.cli-tools" "cli_tools.lpy"] {:file-or-code          "cli_tools.lpy"
                                                                      :code                  false
                                                                      :in-ns                 "basilisp.contrib.cli-tools"
                                                                      :warn-on-shadowed-var  nil
                                                                      :warn-on-shadowed-name nil}
      ["run" "--warn-on-shadowed-name" "-c" "(identity 1)"]          {:file-or-code          "(identity 1)"
                                                                      :code                  true
                                                                      :in-ns                 "basilisp.user"
                                                                      :warn-on-shadowed-var  nil
                                                                      :warn-on-shadowed-name true}
      ["run" "--code" "(identity 1)"]                                {:file-or-code          "(identity 1)"
                                                                      :code                  true
                                                                      :in-ns                 "basilisp.user"
                                                                      :warn-on-shadowed-var  nil
                                                                      :warn-on-shadowed-name nil}

      ["run-all" "script.lpy"]                                        {:files    ["script.lpy"]
                                                                       :parallel 1}
      ["run-all" "-vvv" "script.lpy"]                                 {:files    ["script.lpy"]
                                                                       :parallel 1
                                                                       :verboose 4}
      ["run-all" "-p" "3" "script1.lpy", "script2.lpy" "script3.lpy"] {:files    ["script1.lpy", "script2.lpy" "script3.lpy"]
                                                                       :parallel 3})))
