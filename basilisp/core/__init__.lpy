(in-ns 'basilisp.core)

(def list
  (fn* list [& args] args))

(def ^{:doc "Return the first element in a sequence."}
  first
  (fn* first [seq] (.-first seq)))

(def rest
  (fn* rest [seq] (.-rest seq)))

(def second
  (fn* second [seq] (.-first (.-rest seq))))

(def cons
  (fn* cons [v seq] (.cons seq v)))

(def meta
  (fn* meta [o]
       (.-meta o)))

(def with-meta
  (fn* with-meta [o meta]
       (.with-meta o meta)))

(def ^:macro let
  (fn* let [&form & decl]
       (cons 'let* decl)))

(def ^:macro fn
  (fn* fn [&form & decl]
       (with-meta
         (cons 'fn* decl)
         (meta decl))))

(def identity
  (fn identity [v] v))

(def
  ^{:doc "Return true if obj is an instance of class."}
  instance?
  (fn instance? [class obj]
    (builtins/isinstance obj class)))

(def
  ^{:doc "Return true if obj is a string."}
  string?
  (fn string? [o]
    (instance? builtins/str o)))

(def seq
  (fn seq [o]
    (basilisp.lang.runtime/to-seq o)))

(def apply
  (fn apply [f & args]
    (basilisp.lang.runtime/apply f args)))

(def concat
  (fn concat [& seqs]
    (apply basilisp.lang.runtime/concat seqs)))

(def hash-map
  (fn hash-map [& kvs]
    (apply basilisp.lang.map/hash-map kvs)))

(def hash-set
  (fn hash-set [& members]
    (apply basilisp.lang.set/s members)))

(def vector
  (fn vector [& elems]
    (apply basilisp.lang.vector/v elems)))

(def print
  (fn print [& args]
    (apply builtins/print args)))

(def
  ^{:macro true
    :doc   ""}
  defn
  (fn defn [&form name & body]
    `(fn* ~name )))
